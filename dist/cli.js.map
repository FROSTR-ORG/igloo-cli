{"version":3,"sources":["../src/cli.tsx","../src/components/Intro.tsx","../src/components/Setup.tsx","../src/components/About.tsx","../src/components/keyset/KeysetCreate.tsx","../src/keyset/paths.ts","../src/keyset/storage.ts","../src/keyset/crypto.ts","../src/keyset/naming.ts","../src/components/ui/Prompt.tsx","../src/components/keyset/ShareSaver.tsx","../src/components/keyset/KeysetList.tsx","../src/components/keyset/KeysetLoad.tsx","../src/components/keyset/KeysetHelp.tsx","../src/components/keyset/KeysetStatus.tsx","../src/App.tsx","../src/components/Help.tsx","../package.json"],"sourcesContent":["import React from 'react';\nimport {render} from 'ink';\nimport App from './App.js';\nimport {Help} from './components/Help.js';\nimport packageJson from '../package.json' with {type: 'json'};\n\ntype Flags = Record<string, string | boolean>;\n\ntype ParsedArgs = {\n  command: string;\n  args: string[];\n  flags: Flags;\n  showHelp: boolean;\n  showVersion: boolean;\n};\n\nfunction parseArgv(argv: string[]): ParsedArgs {\n  const flags: Flags = {};\n  const positionals: string[] = [];\n  let showHelp = false;\n  let showVersion = false;\n\n  for (let index = 0; index < argv.length; index += 1) {\n    const value = argv[index];\n\n    if (value === '--help' || value === '-h') {\n      showHelp = true;\n      continue;\n    }\n\n    if (value === '--version' || value === '-v') {\n      showVersion = true;\n      continue;\n    }\n\n    if (value.startsWith('--')) {\n      const [name, inline] = value.slice(2).split('=');\n\n      if (inline !== undefined && inline.length > 0) {\n        flags[name] = inline;\n        continue;\n      }\n\n      const next = argv[index + 1];\n      if (next !== undefined && !next.startsWith('-')) {\n        flags[name] = next;\n        index += 1;\n      } else {\n        flags[name] = true;\n      }\n\n      continue;\n    }\n\n    if (value.startsWith('-') && value.length > 1) {\n      const name = value.slice(1);\n      const next = argv[index + 1];\n      if (next !== undefined && !next.startsWith('-')) {\n        flags[name] = next;\n        index += 1;\n      } else {\n        flags[name] = true;\n      }\n      continue;\n    }\n\n    positionals.push(value);\n  }\n\n  if (flags.t !== undefined && flags.threshold === undefined) {\n    flags.threshold = flags.t;\n    delete flags.t;\n  }\n\n  if (flags.T !== undefined && flags.total === undefined) {\n    flags.total = flags.T;\n    delete flags.T;\n  }\n\n  return {\n    command: positionals[0] ?? 'intro',\n    args: positionals.slice(1),\n    flags,\n    showHelp,\n    showVersion\n  };\n}\n\nfunction showHelpScreen(version: string) {\n  const instance = render(<Help version={version} />);\n  instance.waitUntilExit().then(() => process.exit(0));\n}\n\nfunction showVersion(version: string) {\n  console.log(version);\n  process.exit(0);\n}\n\nconst {command, args, flags, showHelp, showVersion: shouldShowVersion} = parseArgv(\n  process.argv.slice(2)\n);\n\nif (shouldShowVersion) {\n  showVersion(packageJson.version);\n}\n\nif (showHelp) {\n  showHelpScreen(packageJson.version);\n} else {\n  render(\n    <App\n      command={command}\n      args={args}\n      flags={flags}\n      version={packageJson.version}\n    />\n  );\n}\n","import React from 'react';\nimport {Box, Text} from 'ink';\n\ntype IntroProps = {\n  version: string;\n  commandExamples: string[];\n};\n\nexport function Intro({version, commandExamples}: IntroProps) {\n  return (\n    <Box flexDirection=\"column\" paddingX={1}>\n      <Box marginTop={1} flexDirection=\"column\" alignItems=\"center\">\n        <Text color=\"cyanBright\">IGLOO CLI</Text>\n        <Text color=\"white\">FROSTR remote signing toolkit</Text>\n        <Text color=\"gray\">version {version}</Text>\n      </Box>\n\n      <Box marginTop={1} flexDirection=\"column\">\n        <Text color=\"cyan\">What you can do right now</Text>\n        <Text>- igloo-cli setup -- bootstrap a FROSTR signing stack</Text>\n        <Text>- igloo-cli about -- learn about the protocol</Text>\n        <Text>- igloo-cli status -- quick health probes (coming soon)</Text>\n      </Box>\n\n      <Box marginTop={1} flexDirection=\"column\">\n        <Text color=\"cyan\">Quick start</Text>\n        {commandExamples.map(example => (\n          <Text key={example}>› {example}</Text>\n        ))}\n      </Box>\n    </Box>\n  );\n}\n","import React from 'react';\nimport {Box, Text} from 'ink';\n\ntype SetupProps = {\n  threshold: number;\n  total: number;\n};\n\nexport function Setup({threshold, total}: SetupProps) {\n  return (\n    <Box flexDirection=\"column\" paddingX={1}>\n      <Text color=\"cyanBright\">Bootstrap your FROSTR signing circle</Text>\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text>1. Launch Igloo Desktop and create a fresh nsec.</Text>\n        <Text>\n          2. Split it into a {threshold}/{total} share set; stash the recovery share\n          offline.\n        </Text>\n        <Text>\n          3. Load one share into Igloo Desktop, configure nostr relays, and start\n          the local signer.\n        </Text>\n        <Text>\n          4. Load an additional share into Frost2x or another remote signer so it\n          can co-sign requests.\n        </Text>\n        <Text>\n          5. Share relay URLs with every signer; all nodes must speak on the same\n          relays.\n        </Text>\n      </Box>\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"cyan\">Next actions</Text>\n        <Text>- \"igloo-cli status\" -- planned: probe connected signers.</Text>\n        <Text>- \"igloo-cli rotate\" -- planned: guide share rotation drills.</Text>\n      </Box>\n    </Box>\n  );\n}\n","import React from 'react';\nimport {Box, Text} from 'ink';\n\nexport function About() {\n  return (\n    <Box flexDirection=\"column\" paddingX={1}>\n      <Text color=\"cyanBright\">Why FROSTR</Text>\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text>- Break any nsec into durable Shamir shares.</Text>\n        <Text>- Compose flexible k-of-n multi signer networks.</Text>\n        <Text>- Keep your npub and signature shapes unchanged.</Text>\n        <Text>- Rotate shares on demand without touching clients.</Text>\n        <Text>- Communicate over encrypted nostr relays via bifrost.</Text>\n      </Box>\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"cyan\">Other Igloo projects</Text>\n        <Text>- Igloo Desktop: local signing device and share manager.</Text>\n        <Text>- Frost2x: browser signer that speaks NIP-07 and NIP-46.</Text>\n        <Text>- Igloo Server: personal relay and signing service.</Text>\n        <Text>- Igloo Mobile and Serverless: upcoming footprints.</Text>\n      </Box>\n    </Box>\n  );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {Box, Text} from 'ink';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\nimport {nip19} from 'nostr-tools';\nimport {ed25519} from '@noble/curves/ed25519.js';\nimport {randomBytes} from 'node:crypto';\nimport {generateKeysetWithSecret} from '@frostr/igloo-core';\nimport {\n  readShareFiles,\n  slugifyKeysetName,\n  keysetNameExists,\n  KeyMaterial,\n  GeneratedKeyset,\n  ShareMetadata\n} from '../../keyset/index.js';\nimport {Prompt} from '../ui/Prompt.js';\nimport {ShareSaver} from './ShareSaver.js';\n\ntype KeysetCreateProps = {\n  flags: Record<string, string | boolean>;\n};\n\ntype StepId = 'name' | 'total' | 'threshold' | 'nsec';\n\ntype ValidationState = Record<StepId, boolean>;\n\ntype LoadState<T> = {\n  loading: boolean;\n  error: string | null;\n  data: T;\n};\n\nfunction parseNumberFlag(value: string | boolean | undefined, fallback: number): number {\n  if (typeof value === 'string' && value.trim().length > 0) {\n    const parsed = Number(value);\n    if (Number.isFinite(parsed) && parsed > 0) {\n      return parsed;\n    }\n  }\n  return fallback;\n}\n\nfunction generateKeyMaterial(): KeyMaterial {\n  const secretBuffer = randomBytes(32);\n  const secretBytes = Uint8Array.from(secretBuffer);\n  const secretHex = Buffer.from(secretBytes).toString('hex');\n  const publicKey = ed25519.getPublicKey(secretBytes);\n  const publicKeyHex = Buffer.from(publicKey).toString('hex');\n  const npub = nip19.npubEncode(publicKeyHex);\n  const nsec = nip19.nsecEncode(secretBytes);\n  return {\n    secretHex,\n    npub,\n    nsec\n  };\n}\n\nfunction decodeSecret(input: string): KeyMaterial | string {\n  const trimmed = input.trim();\n\n  if (trimmed.toLowerCase() === 'generate') {\n    return generateKeyMaterial();\n  }\n\n  if (trimmed.startsWith('nsec')) {\n    try {\n      const decoded = nip19.decode(trimmed);\n      if (decoded.type !== 'nsec') {\n        return 'Provided value is not an nsec secret key.';\n      }\n      const secretBytes = Uint8Array.from(decoded.data as Uint8Array);\n      const secretHex = Buffer.from(secretBytes).toString('hex');\n      if (secretHex.length !== 64) {\n        return 'Secret key must be 32 bytes.';\n      }\n      const publicKey = ed25519.getPublicKey(secretBytes);\n      const publicKeyHex = Buffer.from(publicKey).toString('hex');\n      const npub = nip19.npubEncode(publicKeyHex);\n      return {\n        secretHex,\n        nsec: trimmed,\n        npub\n      } satisfies KeyMaterial;\n    } catch (error: any) {\n      return `Failed to decode nsec: ${error.message ?? error}`;\n    }\n  }\n\n  if (/^[0-9a-fA-F]{64}$/.test(trimmed)) {\n    const secretHex = trimmed.toLowerCase();\n    const secretBytes = Uint8Array.from(Buffer.from(secretHex, 'hex'));\n    const publicKey = ed25519.getPublicKey(secretBytes);\n    const publicKeyHex = Buffer.from(publicKey).toString('hex');\n    const npub = nip19.npubEncode(publicKeyHex);\n    const nsec = nip19.nsecEncode(secretBytes);\n    return {\n      secretHex,\n      nsec,\n      npub\n    } satisfies KeyMaterial;\n  }\n\n  return 'Enter an nsec (bech32) secret key or 64-character hex string, or type \"generate\".';\n}\n\nexport function KeysetCreate({flags}: KeysetCreateProps) {\n  const [sharesState, setSharesState] = useState<LoadState<ShareMetadata[]>>({\n    loading: true,\n    error: null,\n    data: []\n  });\n  const [form, setForm] = useState({\n    name: typeof flags.name === 'string' ? flags.name : '',\n    threshold: parseNumberFlag(flags.threshold, 2),\n    total: parseNumberFlag(flags.total, 3)\n  });\n  const [validated, setValidated] = useState<ValidationState>({\n    name: false,\n    threshold: false,\n    total: false,\n    nsec: false\n  });\n  const [keyMaterial, setKeyMaterial] = useState<KeyMaterial | null>(null);\n  const [keyset, setKeyset] = useState<GeneratedKeyset | null>(null);\n  const [generationStatus, setGenerationStatus] = useState<'idle' | 'pending' | 'error' | 'ready'>('idle');\n  const [generationError, setGenerationError] = useState<string | null>(null);\n  const [prefilled, setPrefilled] = useState(false);\n  const directPassword = typeof flags.password === 'string' ? flags.password : undefined;\n  const passwordFilePath = typeof flags['password-file'] === 'string' ? flags['password-file'] : undefined;\n  const outputDirFlag = typeof flags.output === 'string' ? flags.output : undefined;\n  const resolvedOutputDir = outputDirFlag ? path.resolve(process.cwd(), outputDirFlag) : undefined;\n  const [automationPassword, setAutomationPassword] = useState<string | undefined>(directPassword);\n  const [automationError, setAutomationError] = useState<string | null>(null);\n  const [automationLoading, setAutomationLoading] = useState<boolean>(Boolean(passwordFilePath && !directPassword));\n  const automationRequested = Boolean(directPassword || passwordFilePath || outputDirFlag);\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const data = await readShareFiles();\n        setSharesState({loading: false, error: null, data});\n      } catch (error: any) {\n        setSharesState({\n          loading: false,\n          error: error?.message ?? 'Unable to load saved shares',\n          data: []\n        });\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (directPassword) {\n      setAutomationPassword(directPassword);\n      setAutomationLoading(false);\n      return;\n    }\n\n    if (!passwordFilePath) {\n      setAutomationLoading(false);\n      return;\n    }\n\n    setAutomationLoading(true);\n    setAutomationError(null);\n\n    void (async () => {\n      try {\n        const raw = await fs.readFile(passwordFilePath, 'utf8');\n        const firstLine = raw.split(/\\r?\\n/)[0] ?? '';\n        const trimmed = firstLine.trim();\n        setAutomationPassword(trimmed.length > 0 ? trimmed : undefined);\n        setAutomationLoading(false);\n      } catch (error: any) {\n        setAutomationError(`Unable to read password file: ${error?.message ?? error}`);\n        setAutomationLoading(false);\n      }\n    })();\n  }, [directPassword, passwordFilePath]);\n\n  const existingSlugs = useMemo(() => {\n    return new Set(\n      sharesState.data.map(record => {\n        if (record.keysetName) {\n          return slugifyKeysetName(record.keysetName);\n        }\n\n        const match = record.name.match(/(.+) share \\d+$/i);\n        const base = match ? match[1] : record.name;\n        return slugifyKeysetName(base);\n      })\n    );\n  }, [sharesState.data]);\n\n  const thresholdFlagProvided =\n    typeof flags.threshold === 'string' || (typeof flags.threshold === 'boolean' && flags.threshold);\n  const totalFlagProvided =\n    typeof flags.total === 'string' || (typeof flags.total === 'boolean' && flags.total);\n\n  useEffect(() => {\n    if (sharesState.loading || prefilled) {\n      return;\n    }\n\n    const nextValidated: ValidationState = {...validated};\n    let changed = false;\n\n    if (!nextValidated.name && form.name.trim().length > 0) {\n      const slug = slugifyKeysetName(form.name);\n      if (!existingSlugs.has(slug)) {\n        nextValidated.name = true;\n        changed = true;\n      }\n    }\n\n    const shouldPrefillTotal = automationRequested || totalFlagProvided;\n    if (!nextValidated.total && shouldPrefillTotal && form.total >= form.threshold) {\n      nextValidated.total = true;\n      changed = true;\n    }\n\n    const shouldPrefillThreshold = automationRequested || thresholdFlagProvided;\n    if (!nextValidated.threshold && shouldPrefillThreshold && form.threshold > 0) {\n      nextValidated.threshold = true;\n      changed = true;\n    }\n\n    const nsecFlag = typeof flags.nsec === 'string' ? flags.nsec : undefined;\n    if (!nextValidated.nsec && nsecFlag) {\n      const decoded = decodeSecret(nsecFlag);\n      if (typeof decoded !== 'string') {\n        setKeyMaterial(decoded);\n        nextValidated.nsec = true;\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      setValidated(nextValidated);\n    }\n\n    setPrefilled(true);\n  }, [\n    sharesState.loading,\n    prefilled,\n    form.name,\n    form.threshold,\n    form.total,\n    existingSlugs,\n    flags.nsec,\n    validated,\n    automationRequested,\n    thresholdFlagProvided,\n    totalFlagProvided\n  ]);\n\n  useEffect(() => {\n    if (generationStatus !== 'idle' || keyset !== null) {\n      return;\n    }\n\n    if (!validated.name || !validated.threshold || !validated.total || !validated.nsec) {\n      return;\n    }\n\n    if (!keyMaterial) {\n      return;\n    }\n\n    setGenerationStatus('pending');\n    setGenerationError(null);\n\n    try {\n      const generated = generateKeysetWithSecret(form.threshold, form.total, keyMaterial.secretHex);\n      setKeyset(generated);\n      setGenerationStatus('ready');\n    } catch (error: any) {\n      setGenerationStatus('error');\n      setGenerationError(error?.message ?? 'Failed to generate keyset');\n    }\n  }, [validated, keyMaterial, form.threshold, form.total, generationStatus, keyset]);\n\n  if (sharesState.loading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Loading existing shares…</Text>\n      </Box>\n    );\n  }\n\n  if (sharesState.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{sharesState.error}</Text>\n      </Box>\n    );\n  }\n\n  if (automationError) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{automationError}</Text>\n      </Box>\n    );\n  }\n\n  if (automationRequested && !prefilled) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Preparing automation inputs…</Text>\n      </Box>\n    );\n  }\n\n  const currentStep = (() => {\n    if (!validated.name) {\n      return 'name' as const;\n    }\n    if (!validated.total) {\n      return 'total' as const;\n    }\n    if (!validated.threshold) {\n      return 'threshold' as const;\n    }\n    if (!validated.nsec) {\n      return 'nsec' as const;\n    }\n    return undefined;\n  })();\n\n  if (currentStep === 'name') {\n    return (\n      <Prompt\n        key=\"keyset-name\"\n        label=\"Keyset name\"\n        initialValue={form.name}\n        hint=\"Choose a unique name.\"\n        onSubmit={async value => {\n          const trimmed = value.trim();\n          if (trimmed.length === 0) {\n            return 'Keyset name cannot be empty.';\n          }\n\n          if (await keysetNameExists(trimmed) || existingSlugs.has(slugifyKeysetName(trimmed))) {\n            return 'A keyset with this name already exists in your share directory.';\n          }\n\n          setForm(current => ({...current, name: trimmed}));\n          setValidated(current => ({...current, name: true}));\n          return undefined;\n        }}\n      />\n    );\n  }\n\n  if (currentStep === 'total') {\n    return (\n      <Prompt\n        key=\"total\"\n        label=\"Total number of shares\"\n        initialValue={String(form.total)}\n        hint=\"Must be an integer between 1 and 16.\"\n        onSubmit={value => {\n          const numeric = Number(value.trim());\n          if (!Number.isInteger(numeric) || numeric < 1) {\n            return 'Total shares must be an integer greater than 0.';\n          }\n          if (numeric > 16) {\n            return 'Total shares is capped at 16 for now.';\n          }\n\n          const wasThresholdValidated = validated.threshold;\n          if (wasThresholdValidated && numeric < form.threshold) {\n            return 'Total shares cannot be smaller than the threshold.';\n          }\n          const shouldClampThreshold = !wasThresholdValidated && form.threshold > numeric;\n\n          setForm(current => {\n            const nextThreshold = shouldClampThreshold ? Math.min(current.threshold, numeric) : current.threshold;\n            return {...current, total: numeric, threshold: nextThreshold};\n          });\n\n          setValidated(current => ({\n            ...current,\n            total: true,\n            threshold: wasThresholdValidated ? current.threshold : false\n          }));\n          return undefined;\n        }}\n      />\n    );\n  }\n\n  if (currentStep === 'threshold') {\n    return (\n      <Prompt\n        key=\"threshold\"\n        label=\"Threshold (number of shares required)\"\n        initialValue={String(form.threshold)}\n        hint=\"Must be at least 1 and not greater than total shares.\"\n        onSubmit={value => {\n          const numeric = Number(value.trim());\n          if (!Number.isInteger(numeric) || numeric < 1) {\n            return 'Threshold must be an integer greater than 0.';\n          }\n          if (numeric > form.total) {\n            return 'Threshold cannot exceed total number of shares.';\n          }\n          setForm(current => ({...current, threshold: numeric}));\n          setValidated(current => ({...current, threshold: true}));\n          return undefined;\n        }}\n      />\n    );\n  }\n\n  if (currentStep === 'nsec') {\n    return (\n      <Prompt\n        key=\"nsec\"\n        label=\"Secret key\"\n        hint=\"Paste an nsec, 64-char hex key, or type 'generate' to create a fresh one.\"\n        onSubmit={value => {\n          const decoded = decodeSecret(value);\n          if (typeof decoded === 'string') {\n            return decoded;\n          }\n          setKeyMaterial(decoded);\n          setValidated(current => ({...current, nsec: true}));\n          return undefined;\n        }}\n      />\n    );\n  }\n\n  if (generationStatus === 'pending') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Generating keyset…</Text>\n      </Box>\n    );\n  }\n\n  if (generationStatus === 'error' || generationError) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{generationError ?? 'Failed to generate keyset.'}</Text>\n      </Box>\n    );\n  }\n\n  if (!keyset || !keyMaterial) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Preparing key material…</Text>\n      </Box>\n    );\n  }\n\n  if (automationLoading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Preparing automation inputs…</Text>\n      </Box>\n    );\n  }\n\n  if (automationPassword && automationPassword.length > 0 && automationPassword.length < 8) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">Automation password must be at least 8 characters.</Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text color=\"cyanBright\">Keyset ready</Text>\n      <Text>Name: {form.name}</Text>\n      <Text>Threshold: {form.threshold}</Text>\n      <Text>Total shares: {form.total}</Text>\n      <Text>npub: {keyMaterial.npub}</Text>\n      <Text>nsec: {keyMaterial.nsec}</Text>\n      {resolvedOutputDir ? (\n        <Text color=\"gray\">Output directory: {resolvedOutputDir}</Text>\n      ) : null}\n      <Box marginTop={1} flexDirection=\"column\">\n        <ShareSaver\n          keysetName={form.name}\n          groupCredential={keyset.groupCredential}\n          shareCredentials={keyset.shareCredentials}\n          onComplete={() => {\n            setGenerationStatus('ready');\n          }}\n          autoPassword={automationPassword}\n          outputDir={resolvedOutputDir}\n        />\n      </Box>\n    </Box>\n  );\n}\n","import os from 'node:os';\nimport path from 'node:path';\n\nexport function getAppDataPath(): string {\n  const platform = os.platform();\n\n  if (platform === 'win32') {\n    return process.env.APPDATA ?? path.join(os.homedir(), 'AppData', 'Roaming');\n  }\n\n  if (platform === 'darwin') {\n    return path.join(os.homedir(), 'Library', 'Application Support');\n  }\n\n  return process.env.XDG_CONFIG_HOME ?? path.join(os.homedir(), '.config');\n}\n\nexport function getShareDirectory(): string {\n  return path.join(getAppDataPath(), 'igloo', 'shares');\n}\n","import {promises as fs} from 'node:fs';\nimport path from 'node:path';\nimport {getShareDirectory} from './paths.js';\nimport {ShareFileRecord, ShareMetadata} from './types.js';\n\nexport async function ensureShareDirectory(dirOverride?: string): Promise<string> {\n  const dir = dirOverride ?? getShareDirectory();\n  await fs.mkdir(dir, {recursive: true});\n  return dir;\n}\n\nexport async function readShareFiles(): Promise<ShareMetadata[]> {\n  const dir = getShareDirectory();\n\n  try {\n    const files = await fs.readdir(dir);\n    const shareFiles = files.filter(file => file.endsWith('.json'));\n\n    const entries: ShareMetadata[] = [];\n\n    for (const file of shareFiles) {\n      const filepath = path.join(dir, file);\n      try {\n        const raw = await fs.readFile(filepath, 'utf8');\n        const data = JSON.parse(raw) as ShareFileRecord;\n        entries.push({\n          ...data,\n          filepath\n        });\n      } catch (error) {\n        // ignore malformed files\n      }\n    }\n\n    return entries;\n  } catch (error: any) {\n    if (error?.code === 'ENOENT') {\n      return [];\n    }\n    throw error;\n  }\n}\n\nexport async function saveShareRecord(\n  record: ShareFileRecord,\n  options: {directory?: string} = {}\n): Promise<string> {\n  const dir = await ensureShareDirectory(options.directory);\n  const filepath = path.join(dir, `${record.id}.json`);\n  await fs.writeFile(filepath, JSON.stringify(record, null, 2), 'utf8');\n  return filepath;\n}\n\nexport async function loadShareRecord(identifier: {\n  id?: string;\n  filepath?: string;\n}): Promise<ShareMetadata | undefined> {\n  const {id, filepath} = identifier;\n\n  if (filepath) {\n    try {\n      const raw = await fs.readFile(filepath, 'utf8');\n      const data = JSON.parse(raw) as ShareFileRecord;\n      return {\n        ...data,\n        filepath\n      } satisfies ShareMetadata;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  if (!id) {\n    return undefined;\n  }\n\n  const dir = getShareDirectory();\n  const target = path.join(dir, `${id}.json`);\n\n  try {\n    const raw = await fs.readFile(target, 'utf8');\n    const data = JSON.parse(raw) as ShareFileRecord;\n    return {\n      ...data,\n      filepath: target\n    } satisfies ShareMetadata;\n  } catch (error) {\n    return undefined;\n  }\n}\n","import {randomBytes} from 'node:crypto';\nimport {pbkdf2} from '@noble/hashes/pbkdf2.js';\nimport {sha256} from '@noble/hashes/sha2.js';\nimport {gcm} from '@noble/ciphers/aes.js';\n\nfunction hexToUint8(hex: string, expectedLength?: number): Uint8Array {\n  const normalized = hex.startsWith('0x') ? hex.slice(2) : hex;\n  if (normalized.length % 2 !== 0) {\n    throw new Error('Invalid hex string length');\n  }\n  const bytes = new Uint8Array(normalized.length / 2);\n  for (let i = 0; i < bytes.length; i += 1) {\n    bytes[i] = parseInt(normalized.slice(i * 2, i * 2 + 2), 16);\n  }\n  if (expectedLength !== undefined && bytes.length !== expectedLength) {\n    throw new Error(`Expected ${expectedLength} bytes, received ${bytes.length}`);\n  }\n  return bytes;\n}\n\nfunction uint8ToHex(bytes: Uint8Array): string {\n  return Buffer.from(bytes).toString('hex');\n}\n\nfunction stringToUint8(value: string): Uint8Array {\n  return new TextEncoder().encode(value);\n}\n\nexport function deriveSecret(password: string, saltHex: string): string {\n  const passwordBytes = stringToUint8(password);\n  const saltBytes = hexToUint8(saltHex, 16);\n  const derived = pbkdf2(sha256, passwordBytes, saltBytes, {c: 32, dkLen: 32});\n  return uint8ToHex(derived);\n}\n\nexport function encryptPayload(secretHex: string, payload: string, ivHex?: string): {\n  cipherText: string;\n  iv: string;\n} {\n  const payloadBytes = stringToUint8(payload);\n  const secretBytes = hexToUint8(secretHex, 32);\n  const ivBytes = ivHex ? hexToUint8(ivHex, 24) : new Uint8Array(randomBytes(24));\n  const cipher = gcm(secretBytes, ivBytes);\n  const encrypted = cipher.encrypt(payloadBytes);\n  const combined = new Uint8Array(ivBytes.length + encrypted.length);\n  combined.set(ivBytes, 0);\n  combined.set(encrypted, ivBytes.length);\n  const cipherText = Buffer.from(combined).toString('base64url');\n  return {\n    cipherText,\n    iv: uint8ToHex(ivBytes)\n  };\n}\n\nexport function decryptPayload(secretHex: string, encoded: string): string {\n  const combined = Buffer.from(encoded, 'base64url');\n  const iv = combined.subarray(0, 24);\n  const encrypted = combined.subarray(24);\n  const secretBytes = hexToUint8(secretHex, 32);\n  const cipher = gcm(secretBytes, iv);\n  const decrypted = cipher.decrypt(encrypted);\n  return new TextDecoder().decode(decrypted);\n}\n\nexport function randomSaltHex(): string {\n  return Buffer.from(randomBytes(16)).toString('hex');\n}\n","import path from 'node:path';\nimport {promises as fs} from 'node:fs';\nimport {getShareDirectory} from './paths.js';\n\nexport function slugifyKeysetName(name: string): string {\n  const trimmed = name.trim().toLowerCase();\n  const slug = trimmed.replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');\n  return slug.length > 0 ? slug : 'keyset';\n}\n\nexport function buildShareId(keysetName: string, index: number): string {\n  const slug = slugifyKeysetName(keysetName);\n  return `${slug}_share_${index}`;\n}\n\nexport function buildShareFilePath(keysetName: string, index: number): string {\n  const dir = getShareDirectory();\n  const id = buildShareId(keysetName, index);\n  return path.join(dir, `${id}.json`);\n}\n\nexport async function keysetNameExists(name: string): Promise<boolean> {\n  const dir = getShareDirectory();\n  try {\n    const files = await fs.readdir(dir);\n    const slug = slugifyKeysetName(name);\n    return files.some(file => file.startsWith(`${slug}_share_`));\n  } catch (error: any) {\n    if (error?.code === 'ENOENT') {\n      return false;\n    }\n    throw error;\n  }\n}\n","import React, {useState} from 'react';\nimport {Box, Text, useInput, useStdin} from 'ink';\n\ntype PromptProps = {\n  label: string;\n  hint?: string;\n  initialValue?: string;\n  mask?: boolean;\n  allowEmpty?: boolean;\n  validate?: (value: string) => string | null;\n  onSubmit: (value: string) => void | string | Promise<void | string>;\n};\n\nfunction maskValue(value: string, mask?: boolean) {\n  if (!mask) {\n    return value;\n  }\n  return '•'.repeat(value.length);\n}\n\nexport function Prompt({\n  label,\n  hint,\n  initialValue = '',\n  mask,\n  allowEmpty = false,\n  validate,\n  onSubmit\n}: PromptProps) {\n  const [value, setValue] = useState(initialValue);\n  const [error, setError] = useState<string | null>(null);\n  const [busy, setBusy] = useState(false);\n  const {isRawModeSupported} = useStdin();\n\n  async function handleSubmit() {\n    if (busy) {\n      return;\n    }\n\n    const trimmed = value.trim();\n    if (!allowEmpty && trimmed.length === 0) {\n      setError('Value is required');\n      return;\n    }\n\n    if (validate) {\n      const validationError = validate(value);\n      if (validationError) {\n        setError(validationError);\n        return;\n      }\n    }\n\n    setBusy(true);\n    try {\n      const result = await onSubmit(value);\n      if (typeof result === 'string' && result.length > 0) {\n        setError(result);\n        setBusy(false);\n        return;\n      }\n      setError(null);\n    } finally {\n      setBusy(false);\n    }\n  }\n\n  useInput((input, key) => {\n    if (busy || !isRawModeSupported) {\n      return;\n    }\n\n    if (key.ctrl && input === 'c') {\n      return;\n    }\n\n    if (key.return) {\n      void handleSubmit();\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setValue(current => current.slice(0, -1));\n      setError(null);\n      return;\n    }\n\n    if (key.escape) {\n      setValue('');\n      setError(null);\n      return;\n    }\n\n    if (key.upArrow || key.downArrow || key.leftArrow || key.rightArrow) {\n      return;\n    }\n\n    if (input) {\n      setValue(current => current + input);\n      setError(null);\n    }\n  }, {isActive: isRawModeSupported && !busy});\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text>{label}</Text>\n      {isRawModeSupported ? (\n        <Text>\n          {maskValue(value, mask)}\n          {value.length === 0 && !mask ? '▁' : ''}\n        </Text>\n      ) : (\n        <Text color=\"red\">Interactive input is not supported in this environment. Supply values via CLI flags.</Text>\n      )}\n      {hint ? <Text color=\"gray\">{hint}</Text> : null}\n      {error ? <Text color=\"red\">{error}</Text> : null}\n    </Box>\n  );\n}\n","import React, {useMemo, useState} from 'react';\nimport {Box, Text} from 'ink';\nimport {decodeShare} from '@frostr/igloo-core';\nimport {\n  deriveSecret,\n  encryptPayload,\n  randomSaltHex,\n  saveShareRecord,\n  buildShareId,\n  ShareFileRecord\n} from '../../keyset/index.js';\nimport {Prompt} from '../ui/Prompt.js';\n\ntype ShareSaverProps = {\n  keysetName: string;\n  groupCredential: string;\n  shareCredentials: string[];\n  onComplete?: (summary: {\n    savedPaths: string[];\n    skipped: number[];\n  }) => void;\n  autoPassword?: string;\n  outputDir?: string;\n};\n\ntype ShareState = {\n  credential: string;\n  index: number;\n};\n\ntype StepPhase = 'password' | 'confirm' | 'saving' | 'done';\n\nexport function ShareSaver({\n  keysetName,\n  groupCredential,\n  shareCredentials,\n  onComplete,\n  autoPassword,\n  outputDir\n}: ShareSaverProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [phase, setPhase] = useState<StepPhase>('password');\n  const [passwordDraft, setPasswordDraft] = useState('');\n  const [savedPaths, setSavedPaths] = useState<string[]>([]);\n  const [skipped, setSkipped] = useState<number[]>([]);\n  const [feedback, setFeedback] = useState<string | null>(null);\n  const [notified, setNotified] = useState(false);\n  const [autoState, setAutoState] = useState<'idle' | 'running' | 'done' | 'error'>('idle');\n  const [autoError, setAutoError] = useState<string | null>(null);\n\n  const shares = useMemo<ShareState[]>(() => {\n    return shareCredentials.map((credential, idx) => {\n      try {\n        const decoded = decodeShare(credential);\n        return {\n          credential,\n          index: decoded.idx ?? idx + 1\n        } satisfies ShareState;\n      } catch (error) {\n        return {\n          credential,\n          index: idx + 1\n        } satisfies ShareState;\n      }\n    });\n  }, [shareCredentials]);\n\n  const share = shares[currentIndex];\n  const isAutomated = typeof autoPassword === 'string' && autoPassword.length > 0;\n\n  const summaryView = (\n    <Box flexDirection=\"column\">\n      <Text color=\"cyan\">All shares processed.</Text>\n      <Text color=\"cyan\">Group credential:</Text>\n      <Text color=\"gray\">{groupCredential}</Text>\n      {savedPaths.length > 0 ? (\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"cyan\">Saved files</Text>\n          {savedPaths.map(path => (\n            <Text key={path} color=\"gray\">{path}</Text>\n          ))}\n        </Box>\n      ) : (\n        <Text color=\"yellow\">No shares were persisted.</Text>\n      )}\n      {skipped.length > 0 ? (\n        <Text color=\"yellow\">Skipped shares: {skipped.join(', ')}</Text>\n      ) : null}\n      <Box marginTop={1}>\n        <Text color=\"gray\">\n          Run `igloo-cli keyset list` to review your saved shares later.\n        </Text>\n      </Box>\n    </Box>\n  );\n\n  if (!share) {\n    if (!notified && onComplete) {\n      onComplete({savedPaths, skipped});\n      setNotified(true);\n    }\n\n    return summaryView;\n  }\n\n  function resetForNext(nextIndex: number) {\n    setCurrentIndex(nextIndex);\n    setPhase('password');\n    setPasswordDraft('');\n    setFeedback(null);\n  }\n\n  const handleSaveInternal = async (password: string) => {\n    const salt = randomSaltHex();\n    const secret = deriveSecret(password, salt);\n    const {cipherText} = encryptPayload(secret, share.credential);\n\n    const record: ShareFileRecord = {\n      id: buildShareId(keysetName, share.index),\n      name: `${keysetName} share ${share.index}`,\n      keysetName,\n      index: share.index,\n      share: cipherText,\n      salt,\n      groupCredential,\n      savedAt: new Date().toISOString()\n    };\n\n    return saveShareRecord(record, {directory: outputDir});\n  };\n\n  async function handleSave(password: string) {\n    setPhase('saving');\n    try {\n      const filepath = await handleSaveInternal(password);\n      setSavedPaths(current => [...current, filepath]);\n      setFeedback(`Share ${share.index} encrypted and saved.`);\n      setPhase('done');\n    } catch (error: any) {\n      setFeedback(`Failed to save share: ${error?.message ?? error}`);\n      setPhase('password');\n      setPasswordDraft('');\n    }\n  }\n\n  function handlePasswordSubmit(value: string) {\n    const trimmed = value.trim();\n    if (trimmed.length === 0) {\n      setSkipped(current => [...current, share.index]);\n      resetForNext(currentIndex + 1);\n      return undefined;\n    }\n\n    if (trimmed.length < 8) {\n      setFeedback('Password must be at least 8 characters.');\n      return 'Password must be at least 8 characters.';\n    }\n\n    setPasswordDraft(trimmed);\n    setPhase('confirm');\n    return undefined;\n  }\n\n  function handleConfirmSubmit(value: string) {\n    if (value !== passwordDraft) {\n      setFeedback('Passwords do not match. Try again.');\n      setPasswordDraft('');\n      setPhase('password');\n      return 'Passwords do not match. Try again.';\n    }\n\n    void handleSave(passwordDraft);\n    return undefined;\n  }\n\n  if (isAutomated) {\n    if (autoState === 'idle') {\n      if (!autoPassword || autoPassword.length < 8) {\n        setAutoError('Automation password must be at least 8 characters.');\n        setAutoState('error');\n      } else {\n        setAutoState('running');\n        void (async () => {\n          try {\n            const paths: string[] = [];\n            for (const candidate of shares) {\n              const salt = randomSaltHex();\n              const secret = deriveSecret(autoPassword, salt);\n              const {cipherText} = encryptPayload(secret, candidate.credential);\n\n              const record: ShareFileRecord = {\n                id: buildShareId(keysetName, candidate.index),\n                name: `${keysetName} share ${candidate.index}`,\n                keysetName,\n                index: candidate.index,\n                share: cipherText,\n                salt,\n                groupCredential,\n                savedAt: new Date().toISOString()\n              };\n\n              const filepath = await saveShareRecord(record, {directory: outputDir});\n              paths.push(filepath);\n            }\n\n            setSavedPaths(paths);\n            setAutoState('done');\n            if (onComplete) {\n              onComplete({savedPaths: paths, skipped: []});\n            }\n          } catch (error: any) {\n            setAutoError(error?.message ?? 'Failed to save shares in automated mode.');\n            setAutoState('error');\n          }\n        })();\n      }\n    }\n\n    if (autoState === 'running') {\n      return (\n        <Box flexDirection=\"column\">\n          <Text color=\"cyan\">Encrypting and saving shares…</Text>\n        </Box>\n      );\n    }\n\n    if (autoState === 'error') {\n      return (\n        <Box flexDirection=\"column\">\n          <Text color=\"red\">{autoError ?? 'Automation failed.'}</Text>\n        </Box>\n      );\n    }\n\n    return summaryView;\n  }\n\n  if (phase === 'saving') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Encrypting share {share.index}…</Text>\n      </Box>\n    );\n  }\n\n  if (phase === 'done') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"green\">Share {share.index} saved.</Text>\n        {feedback ? <Text color=\"gray\">{feedback}</Text> : null}\n        <Prompt\n          key={`continue-${share.index}`}\n          label=\"Press Enter to continue\"\n          allowEmpty\n          onSubmit={() => {\n            resetForNext(currentIndex + 1);\n            return undefined;\n          }}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text color=\"cyan\">Share {share.index} of {shareCredentials.length}</Text>\n      <Text color=\"gray\">{share.credential}</Text>\n      <Text>\n        Set a password to encrypt this share. Leave blank to skip saving and handle it manually.\n      </Text>\n      {feedback ? <Text color=\"yellow\">{feedback}</Text> : null}\n      {phase === 'password' ? (\n        <Prompt\n          key={`password-${share.index}`}\n          label=\"Password (blank to skip)\"\n          mask\n          allowEmpty\n          onSubmit={handlePasswordSubmit}\n        />\n      ) : null}\n      {phase === 'confirm' ? (\n        <Prompt\n          key={`confirm-${share.index}`}\n          label=\"Confirm password\"\n          mask\n          onSubmit={handleConfirmSubmit}\n        />\n      ) : null}\n    </Box>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport {Box, Text} from 'ink';\nimport {readShareFiles, ensureShareDirectory} from '../../keyset/index.js';\n\ntype ListState = {\n  loading: boolean;\n  error: string | null;\n  shareDir: string | null;\n  shares: Awaited<ReturnType<typeof readShareFiles>>;\n};\n\nexport function KeysetList() {\n  const [state, setState] = useState<ListState>({\n    loading: true,\n    error: null,\n    shareDir: null,\n    shares: []\n  });\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const [dir, entries] = await Promise.all([\n          ensureShareDirectory(),\n          readShareFiles()\n        ]);\n        setState({loading: false, error: null, shareDir: dir, shares: entries});\n      } catch (error: any) {\n        setState({\n          loading: false,\n          error: error?.message ?? 'Failed to read share directory.',\n          shareDir: null,\n          shares: []\n        });\n      }\n    })();\n  }, []);\n\n  if (state.loading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Scanning saved shares…</Text>\n      </Box>\n    );\n  }\n\n  if (state.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{state.error}</Text>\n      </Box>\n    );\n  }\n\n  if (state.shares.length === 0) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"yellow\">No saved shares found yet.</Text>\n        {state.shareDir ? (\n          <Text color=\"gray\">Share directory: {state.shareDir}</Text>\n        ) : null}\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text color=\"cyanBright\">Saved shares</Text>\n      {state.shareDir ? (\n        <Text color=\"gray\">Directory: {state.shareDir}</Text>\n      ) : null}\n      <Box flexDirection=\"column\" marginTop={1}>\n        {state.shares.map((share, index) => (\n          <Box key={share.id} flexDirection=\"column\" marginBottom={1}>\n            <Text>\n              {index + 1}. {share.name} ({share.id})\n            </Text>\n            <Text color=\"gray\">Saved at: {share.savedAt}</Text>\n            <Text color=\"gray\">File: {share.filepath}</Text>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {Box, Text} from 'ink';\nimport {decodeGroup, decodeShare} from '@frostr/igloo-core';\nimport {\n  readShareFiles,\n  deriveSecret,\n  decryptPayload,\n  ShareMetadata\n} from '../../keyset/index.js';\nimport {Prompt} from '../ui/Prompt.js';\n\ntype KeysetLoadProps = {\n  args: string[];\n};\n\ntype LoadState = {\n  loading: boolean;\n  error: string | null;\n  shares: ShareMetadata[];\n};\n\ntype Phase = 'select' | 'password' | 'result';\n\nexport function KeysetLoad({args}: KeysetLoadProps) {\n  const [state, setState] = useState<LoadState>({loading: true, error: null, shares: []});\n  const [phase, setPhase] = useState<Phase>('select');\n  const [selectedShare, setSelectedShare] = useState<ShareMetadata | null>(null);\n  const [result, setResult] = useState<{share: string; group: string} | null>(null);\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const shares = await readShareFiles();\n        setState({loading: false, error: null, shares});\n      } catch (error: any) {\n        setState({loading: false, error: error?.message ?? 'Failed to read shares.', shares: []});\n      }\n    })();\n  }, []);\n\n  const attemptPreselect = useMemo(() => {\n    if (state.shares.length === 0 || args.length === 0) {\n      return null;\n    }\n\n    const token = args[0];\n    const byId = state.shares.find(share => share.id === token || share.name === token);\n    if (byId) {\n      return byId;\n    }\n\n    const numeric = Number(token);\n    if (Number.isInteger(numeric) && numeric >= 1 && numeric <= state.shares.length) {\n      return state.shares[numeric - 1];\n    }\n\n    return null;\n  }, [state.shares, args]);\n\n  useEffect(() => {\n    if (attemptPreselect && !selectedShare) {\n      setSelectedShare(attemptPreselect);\n      setPhase('password');\n    }\n  }, [attemptPreselect, selectedShare]);\n\n  if (state.loading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Loading saved shares…</Text>\n      </Box>\n    );\n  }\n\n  if (state.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{state.error}</Text>\n      </Box>\n    );\n  }\n\n  if (state.shares.length === 0) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"yellow\">No saved shares available.</Text>\n      </Box>\n    );\n  }\n\n  if (phase === 'select') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyanBright\">Select a share to load</Text>\n        {state.shares.map((share, index) => (\n          <Text key={share.id}>\n            {index + 1}. {share.name} ({share.id})\n          </Text>\n        ))}\n        <Prompt\n          key=\"select-share\"\n          label=\"Enter number or share id\"\n          onSubmit={value => {\n            const trimmed = value.trim();\n            if (trimmed.length === 0) {\n              return 'Please choose a share (or press Ctrl+C to exit).';\n            }\n\n            const byId = state.shares.find(share => share.id === trimmed || share.name === trimmed);\n            if (byId) {\n              setSelectedShare(byId);\n              setPhase('password');\n              return undefined;\n            }\n\n            const numeric = Number(trimmed);\n            if (Number.isInteger(numeric) && numeric >= 1 && numeric <= state.shares.length) {\n              setSelectedShare(state.shares[numeric - 1]);\n              setPhase('password');\n              return undefined;\n            }\n\n            return 'Share not found. Enter a listed number or id.';\n          }}\n        />\n      </Box>\n    );\n  }\n\n  if (!selectedShare) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">Share selection missing.</Text>\n      </Box>\n    );\n  }\n\n  if (phase === 'password') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyanBright\">Decrypt share: {selectedShare.name}</Text>\n        <Text color=\"gray\">Saved at {selectedShare.savedAt}</Text>\n        <Prompt\n          key={`password-${selectedShare.id}`}\n          label=\"Enter password\"\n          mask\n          onSubmit={value => {\n            if (value.length < 8) {\n              return 'Password must be at least 8 characters.';\n            }\n\n            try {\n              const secret = deriveSecret(value, selectedShare.salt);\n              const plaintext = decryptPayload(secret, selectedShare.share);\n              setResult({share: plaintext, group: selectedShare.groupCredential});\n              setPhase('result');\n              return undefined;\n            } catch (error: any) {\n              return error?.message ?? 'Failed to decrypt share. Check your password.';\n            }\n          }}\n        />\n      </Box>\n    );\n  }\n\n  if (!result) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">Failed to decrypt share.</Text>\n      </Box>\n    );\n  }\n\n  let shareIndex: number | undefined;\n  try {\n    const decodedShare = decodeShare(result.share);\n    shareIndex = decodedShare.idx;\n  } catch {\n    shareIndex = undefined;\n  }\n\n  let groupInfo: {threshold?: number; totalMembers?: number} | undefined;\n  try {\n    const decodedGroup = decodeGroup(result.group) as any;\n    groupInfo = {\n      threshold: decodedGroup.threshold,\n      totalMembers: decodedGroup.total_members ?? decodedGroup.totalMembers\n    };\n  } catch {\n    groupInfo = undefined;\n  }\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text color=\"green\">Share decrypted successfully.</Text>\n      <Text color=\"cyan\">Share credential</Text>\n      <Text color=\"gray\">{result.share}</Text>\n      <Box marginTop={1}>\n        <Text color=\"cyan\">Group credential</Text>\n      </Box>\n      <Text color=\"gray\">{result.group}</Text>\n      {shareIndex !== undefined ? (\n        <Box marginTop={1} flexDirection=\"column\">\n          <Text color=\"cyan\">Share details</Text>\n          <Text color=\"gray\">Index: {shareIndex}</Text>\n        </Box>\n      ) : null}\n      {groupInfo ? (\n        <Box marginTop={1} flexDirection=\"column\">\n          <Text color=\"cyan\">Group details</Text>\n          {groupInfo.threshold !== undefined ? (\n            <Text color=\"gray\">Threshold: {groupInfo.threshold}</Text>\n          ) : null}\n          {groupInfo.totalMembers !== undefined ? (\n            <Text color=\"gray\">Total members: {groupInfo.totalMembers}</Text>\n          ) : null}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import React from 'react';\nimport {Box, Text} from 'ink';\n\nexport function KeysetHelp() {\n  return (\n    <Box flexDirection=\"column\">\n      <Text color=\"cyanBright\">Keyset commands</Text>\n      <Text>- igloo-cli keyset create   Interactive keyset and share generator.</Text>\n      <Text>- igloo-cli keyset list     Show saved shares on this machine.</Text>\n      <Text>- igloo-cli keyset load     Decrypt a saved share for export.</Text>\n      <Text>- igloo-cli keyset status   Ping peers for a saved share.</Text>\n      <Box marginTop={1}>\n        <Text color=\"gray\">\n          Example: igloo-cli keyset create --name \"Vault\" --threshold 2 --total 3\n        </Text>\n      </Box>\n      <Box>\n        <Text color=\"gray\">\n          Automation: --password-file ./pass.txt --output ./shares --share my-share\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {Box, Text} from 'ink';\nimport fs from 'node:fs/promises';\nimport {\n  createAndConnectNode,\n  closeNode,\n  checkPeerStatus,\n  DEFAULT_PING_RELAYS\n} from '@frostr/igloo-core';\nimport {\n  readShareFiles,\n  deriveSecret,\n  decryptPayload,\n  ShareMetadata\n} from '../../keyset/index.js';\nimport {Prompt} from '../ui/Prompt.js';\n\nexport type KeysetStatusProps = {\n  flags: Record<string, string | boolean>;\n  args: string[];\n};\n\ntype LoadState = {\n  loading: boolean;\n  error: string | null;\n  shares: ShareMetadata[];\n};\n\ntype DiagnosticsResult = {\n  relays: string[];\n  peers: Array<{\n    pubkey: string;\n    status: 'online' | 'offline';\n  }>;\n};\n\ntype Phase = 'select' | 'password' | 'diagnosing' | 'result';\n\nfunction parseRelayFlags(flags: Record<string, string | boolean>): string[] | undefined {\n  const relayString =\n    typeof flags.relays === 'string'\n      ? flags.relays\n      : typeof flags.relay === 'string'\n        ? flags.relay\n        : undefined;\n\n  if (!relayString) {\n    return undefined;\n  }\n\n  return relayString\n    .split(',')\n    .map(relay => relay.trim())\n    .filter(Boolean);\n}\n\nfunction findShare(shares: ShareMetadata[], token: string | undefined): ShareMetadata | null {\n  if (!token) {\n    return null;\n  }\n\n  const direct = shares.find(share => share.id === token || share.name === token);\n  if (direct) {\n    return direct;\n  }\n\n  const numeric = Number(token);\n  if (Number.isInteger(numeric) && numeric >= 1 && numeric <= shares.length) {\n    return shares[numeric - 1];\n  }\n\n  return null;\n}\n\nexport function KeysetStatus({flags, args}: KeysetStatusProps) {\n  const [state, setState] = useState<LoadState>({loading: true, error: null, shares: []});\n  const [phase, setPhase] = useState<Phase>('select');\n  const [selectedShare, setSelectedShare] = useState<ShareMetadata | null>(null);\n  const [result, setResult] = useState<DiagnosticsResult | null>(null);\n  const [statusError, setStatusError] = useState<string | null>(null);\n  const [autoRan, setAutoRan] = useState(false);\n\n  const directPassword = typeof flags.password === 'string' ? flags.password : undefined;\n  const passwordFilePath = typeof flags['password-file'] === 'string' ? flags['password-file'] : undefined;\n  const [automationPassword, setAutomationPassword] = useState<string | undefined>(directPassword);\n  const [automationError, setAutomationError] = useState<string | null>(null);\n  const [automationLoading, setAutomationLoading] = useState<boolean>(Boolean(passwordFilePath && !directPassword));\n\n  const shareToken = typeof flags.share === 'string' ? flags.share : args[0];\n  const relayOverrides = parseRelayFlags(flags);\n  const relays = relayOverrides && relayOverrides.length > 0 ? relayOverrides : DEFAULT_PING_RELAYS;\n\n  useEffect(() => {\n    void (async () => {\n      try {\n        const shares = await readShareFiles();\n        setState({loading: false, error: null, shares});\n      } catch (error: any) {\n        setState({\n          loading: false,\n          error: error?.message ?? 'Failed to load saved shares.',\n          shares: []\n        });\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (directPassword) {\n      setAutomationPassword(directPassword);\n      setAutomationLoading(false);\n      return;\n    }\n\n    if (!passwordFilePath) {\n      setAutomationLoading(false);\n      return;\n    }\n\n    setAutomationLoading(true);\n    setAutomationError(null);\n\n    void (async () => {\n      try {\n        const raw = await fs.readFile(passwordFilePath, 'utf8');\n        const firstLine = raw.split(/\\r?\\n/)[0] ?? '';\n        const trimmed = firstLine.trim();\n        setAutomationPassword(trimmed.length > 0 ? trimmed : undefined);\n        setAutomationLoading(false);\n      } catch (error: any) {\n        setAutomationError(`Unable to read password file: ${error?.message ?? error}`);\n        setAutomationLoading(false);\n      }\n    })();\n  }, [directPassword, passwordFilePath]);\n\n  const preselectedShare = useMemo(() => {\n    if (state.shares.length === 0) {\n      return null;\n    }\n    return findShare(state.shares, shareToken ?? undefined);\n  }, [state.shares, shareToken]);\n\n  useEffect(() => {\n    if (preselectedShare && !selectedShare) {\n      setSelectedShare(preselectedShare);\n      setPhase(prev => (prev === 'select' ? 'password' : prev));\n    }\n  }, [preselectedShare, selectedShare]);\n\n  useEffect(() => {\n    if (!automationPassword || automationPassword.length === 0) {\n      return;\n    }\n\n    if (automationPassword.length < 8) {\n      setAutomationError('Automation password must be at least 8 characters.');\n      return;\n    }\n  }, [automationPassword]);\n\n  const isAutomated = Boolean(automationPassword && shareToken);\n  const autoReady =\n    isAutomated &&\n    !automationLoading &&\n    !automationError &&\n    !autoRan &&\n    selectedShare !== null &&\n    automationPassword !== undefined &&\n    automationPassword.length >= 8;\n\n  useEffect(() => {\n    if (!autoReady) {\n      return;\n    }\n\n    setAutoRan(true);\n    void startDiagnostics(automationPassword as string, selectedShare as ShareMetadata);\n  }, [autoReady, automationPassword, selectedShare]);\n\n  async function startDiagnostics(password: string, share: ShareMetadata) {\n    setPhase('diagnosing');\n    setStatusError(null);\n    setResult(null);\n\n    let node: any;\n\n    try {\n      const secret = deriveSecret(password, share.salt);\n      const shareCredential = decryptPayload(secret, share.share);\n\n      node = await createAndConnectNode(\n        {\n          group: share.groupCredential,\n          share: shareCredential,\n          relays\n        },\n        {enableLogging: false}\n      );\n\n      const peers = await checkPeerStatus(node, share.groupCredential, shareCredential);\n      setResult({relays, peers});\n      setPhase('result');\n    } catch (error: any) {\n      setStatusError(error?.message ?? 'Failed to collect peer status.');\n      setPhase('result');\n    } finally {\n      if (node) {\n        try {\n          closeNode(node);\n        } catch (closeError) {\n          // Ignore close errors to avoid masking diagnostic results.\n        }\n      }\n    }\n  }\n\n  if (state.loading || automationLoading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Loading saved shares…</Text>\n      </Box>\n    );\n  }\n\n  if (state.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{state.error}</Text>\n      </Box>\n    );\n  }\n\n  if (automationError) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">{automationError}</Text>\n      </Box>\n    );\n  }\n\n  if (state.shares.length === 0) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"yellow\">No saved shares available.</Text>\n      </Box>\n    );\n  }\n\n  if (phase === 'select') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyanBright\">Select a share to diagnose</Text>\n        {state.shares.map((share, index) => (\n          <Text key={share.id}>\n            {index + 1}. {share.name} ({share.id})\n          </Text>\n        ))}\n        <Prompt\n          key=\"select-share\"\n          label=\"Enter number or share id\"\n          onSubmit={value => {\n            const trimmed = value.trim();\n            if (trimmed.length === 0) {\n              return 'Please choose a share (or press Ctrl+C to exit).';\n            }\n\n            const chosen = findShare(state.shares, trimmed);\n            if (!chosen) {\n              return 'Share not found. Enter a listed number or id.';\n            }\n\n            setSelectedShare(chosen);\n            setPhase('password');\n            return undefined;\n          }}\n        />\n      </Box>\n    );\n  }\n\n  if (!selectedShare) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"red\">Share selection missing.</Text>\n      </Box>\n    );\n  }\n\n  if (!isAutomated && phase === 'password') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyanBright\">Decrypt share: {selectedShare.name}</Text>\n        <Text color=\"gray\">Saved at {selectedShare.savedAt}</Text>\n        <Prompt\n          key={`password-${selectedShare.id}`}\n          label=\"Enter password\"\n          mask\n          onSubmit={value => {\n            if (value.length < 8) {\n              return 'Password must be at least 8 characters.';\n            }\n\n            setAutomationPassword(value);\n            void startDiagnostics(value, selectedShare);\n            return undefined;\n          }}\n        />\n      </Box>\n    );\n  }\n\n  if (phase === 'diagnosing') {\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"cyan\">Checking peer status via relays…</Text>\n        <Text color=\"gray\">Relays: {relays.join(', ')}</Text>\n      </Box>\n    );\n  }\n\n  if (phase === 'result') {\n    if (statusError) {\n      return (\n        <Box flexDirection=\"column\">\n          <Text color=\"red\">{statusError}</Text>\n        </Box>\n      );\n    }\n\n    if (!result) {\n      return (\n        <Box flexDirection=\"column\">\n          <Text color=\"red\">No diagnostics result available.</Text>\n        </Box>\n      );\n    }\n\n    return (\n      <Box flexDirection=\"column\">\n        <Text color=\"green\">Peer diagnostics complete.</Text>\n        <Text color=\"cyan\">Relays</Text>\n        <Text color=\"gray\">{result.relays.join(', ')}</Text>\n        <Box marginTop={1} flexDirection=\"column\">\n          <Text color=\"cyan\">Peer status</Text>\n          {result.peers.length === 0 ? (\n            <Text color=\"yellow\">No peers discovered in this keyset.</Text>\n          ) : (\n            result.peers.map(peer => (\n              <Text key={peer.pubkey} color={peer.status === 'online' ? 'green' : 'red'}>\n                {peer.pubkey} — {peer.status}\n              </Text>\n            ))\n          )}\n        </Box>\n      </Box>\n    );\n  }\n\n  return null;\n}\n","import React from 'react';\nimport {Box, Text} from 'ink';\nimport {Intro} from './components/Intro.js';\nimport {Setup} from './components/Setup.js';\nimport {About} from './components/About.js';\nimport {KeysetCreate} from './components/keyset/KeysetCreate.js';\nimport {KeysetList} from './components/keyset/KeysetList.js';\nimport {KeysetLoad} from './components/keyset/KeysetLoad.js';\nimport {KeysetHelp} from './components/keyset/KeysetHelp.js';\nimport {KeysetStatus} from './components/keyset/KeysetStatus.js';\n\ntype AppProps = {\n  command: string;\n  args: string[];\n  flags: Record<string, string | boolean>;\n  version: string;\n};\n\nfunction parseNumber(value: string | boolean | undefined, fallback: number) {\n  if (typeof value === 'string') {\n    const parsed = Number(value);\n    if (Number.isFinite(parsed) && parsed > 0) {\n      return parsed;\n    }\n  }\n\n  return fallback;\n}\n\nfunction renderKeyset(args: string[], flags: Record<string, string | boolean>) {\n  const subcommand = args[0]?.toLowerCase();\n\n  switch (subcommand) {\n    case 'create':\n      return <KeysetCreate flags={flags} />;\n    case 'list':\n      return <KeysetList />;\n    case 'load':\n      return <KeysetLoad args={args.slice(1)} />;\n    case 'status':\n      return <KeysetStatus flags={flags} args={args.slice(1)} />;\n    case undefined:\n      return <KeysetHelp />;\n    default:\n      return <KeysetHelp />;\n  }\n}\n\nexport function App({command, args, flags, version}: AppProps) {\n  const normalized = command.toLowerCase();\n  const threshold = parseNumber(flags.threshold, 2);\n  const total = parseNumber(flags.total, 3);\n\n  switch (normalized) {\n    case 'setup':\n      return <Setup threshold={threshold} total={total} />;\n    case 'about':\n      return <About />;\n    case 'status':\n      return <KeysetStatus flags={flags} args={args} />;\n    case 'keyset':\n      return renderKeyset(args, flags);\n    default:\n      return (\n        <Intro\n          version={version}\n          commandExamples={[\n            'igloo-cli setup --threshold 2 --total 3',\n            'igloo-cli about',\n            'igloo-cli keyset status --share my-share --password-file ./pass.txt',\n            'igloo-cli keyset create --password-file ./pass.txt --output ./shares'\n          ]}\n        />\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Box, Text} from 'ink';\n\ntype HelpProps = {\n  version: string;\n};\n\nexport function Help({version}: HelpProps) {\n  return (\n    <Box flexDirection=\"column\" paddingX={1}>\n      <Text color=\"cyanBright\">igloo-cli v{version}</Text>\n      <Text>Usage: igloo-cli [command] [options]</Text>\n      <Box marginTop={1} flexDirection=\"column\">\n        <Text color=\"cyan\">Commands</Text>\n        <Text>- intro (default)  Show the animated welcome.</Text>\n        <Text>- setup            Step through signer bootstrapping.</Text>\n        <Text>- about            Outline the FROSTR stack.</Text>\n        <Text>- status           Check peer reachability with a saved share.</Text>\n        <Text>- keyset           Manage keyset creation, saving, loading, status.</Text>\n      </Box>\n      <Box marginTop={1} flexDirection=\"column\">\n        <Text color=\"cyan\">Options</Text>\n        <Text>-h, --help       Print this message.</Text>\n        <Text>-v, --version    Print the version.</Text>\n        <Text>--threshold n    Override default share threshold.</Text>\n        <Text>--total n        Override total number of shares.</Text>\n        <Text>--name value     Provide a keyset name during creation.</Text>\n        <Text>--nsec value     Provide secret material during creation.</Text>\n        <Text>--password value Use a password non-interactively.</Text>\n        <Text>--password-file  Read password from file.</Text>\n        <Text>--output path    Save encrypted shares to a custom directory.</Text>\n        <Text>--share value    Identify which saved share to load/status.</Text>\n        <Text>--relays list    Override relay list (comma-separated).</Text>\n      </Box>\n    </Box>\n  );\n}\n","{\n  \"name\": \"igloo-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Command-line companion for the FROSTR ecosystem.\",\n  \"main\": \"dist/cli.js\",\n  \"scripts\": {\n    \"test\": \"npm run typecheck\",\n    \"build\": \"tsup\",\n    \"dev\": \"tsx src/cli.tsx\",\n    \"start\": \"node dist/cli.js\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/FROSTR-ORG/igloo-cli.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/FROSTR-ORG/igloo-cli/issues\"\n  },\n  \"homepage\": \"https://github.com/FROSTR-ORG/igloo-cli#readme\",\n  \"dependencies\": {\n    \"@frostr/bifrost\": \"^1.0.7\",\n    \"@frostr/igloo-core\": \"^0.2.0\",\n    \"@noble/ciphers\": \"^2.0.1\",\n    \"@noble/curves\": \"^2.0.1\",\n    \"@noble/hashes\": \"^2.0.1\",\n    \"ink\": \"^6.3.1\",\n    \"nostr-tools\": \"^2.17.0\",\n    \"react\": \"^19.1.1\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^24.6.1\",\n    \"@types/react\": \"^19.1.16\",\n    \"tsup\": \"^8.5.0\",\n    \"tsx\": \"^4.20.6\",\n    \"typescript\": \"^5.9.3\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"bin\": {\n    \"igloo-cli\": \"dist/cli.js\",\n    \"igloo\": \"dist/cli.js\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"type\": \"module\"\n}\n"],"mappings":"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","names":["Box","Text","jsx","jsxs","Box","Text","jsx","jsxs","useMemo","useState","Box","Text","path","fs","randomBytes","path","path","path","fs","fs","Box","Text","jsx","jsxs","useState","Box","Text","jsx","jsxs","useState","Box","Text","path","jsx","jsxs","randomBytes","flags","useState","path","fs","useMemo","Box","Text","useEffect","useState","Box","Text","jsx","jsxs","useState","useEffect","Box","Text","useEffect","useMemo","useState","Box","Text","decodeShare","jsx","jsxs","args","useState","useEffect","useMemo","Box","Text","decodeShare","Box","Text","jsx","jsxs","useEffect","useMemo","useState","Box","Text","fs","jsx","jsxs","flags","args","useState","useEffect","fs","useMemo","Box","Text","jsx","args","flags","command","Box","Text","jsx","jsxs","jsx","flags","showHelp","showVersion"]}