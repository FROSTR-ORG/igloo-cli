import { verify_event } from './event.js';
import { gen_message_id, is_recipient } from './util.js';
import { decrypt_content, get_pubkey, get_shared_secret } from './crypto.js';
import * as CONST from '../const.js';
import Schema from '../schema/index.js';
export function decrypt_payload(event, seckey) {
    const error = verify_event(event);
    if (error !== null) {
        throw new Error(error);
    }
    const pubkey = get_pubkey(seckey);
    if (!is_recipient(event, pubkey)) {
        throw new Error('pubkey not in peers list');
    }
    const secret = get_shared_secret(seckey, event.pubkey);
    const content = decrypt_content(secret, event.content);
    const payload = JSON.parse(content);
    return payload;
}
export function finalize_message(template) {
    const id = template.id ?? gen_message_id();
    return { ...template, id };
}
export function create_payload(tag, data, id) {
    try {
        return JSON.stringify([tag, id, data]);
    }
    catch (err) {
        throw new Error('failed to create message payload');
    }
}
export function parse_envelope(envelope, event) {
    const schema = Schema.msg.envelope;
    const parsed = schema.safeParse(envelope);
    if (!parsed.success) {
        if (CONST.DEBUG)
            console.log(parsed.error);
        throw new Error('envelope failed schema validation');
    }
    const [tag, id, data] = parsed.data;
    return { env: event, data, id, tag };
}
