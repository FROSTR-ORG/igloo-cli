import { get_event_id } from './util.js';
import { encrypt_content, get_pubkey, get_shared_secret, sign_msg, verify_sig } from './crypto.js';
import Schema from '../schema/index.js';
import * as Util from '../util/index.js';
export function create_event(config, payload, peer_pk, seckey) {
    const created_at = config.created_at ?? Util.now();
    const pubkey = get_pubkey(seckey);
    const secret = get_shared_secret(seckey, peer_pk);
    const content = encrypt_content(secret, payload);
    const event = { ...config, pubkey, content, created_at };
    event.tags.push(['p', peer_pk]);
    return sign_event(seckey, event);
}
export function sign_event(seckey, template) {
    const id = get_event_id(template);
    const sig = sign_msg(seckey, id);
    return { ...template, id, sig };
}
export function verify_event(event) {
    const { id, sig, ...template } = event;
    const schema = Schema.event.signed;
    const parsed = schema.safeParse(event);
    const vid = get_event_id(template);
    if (!parsed.success) {
        return 'event failed schema validation';
    }
    else if (id !== vid) {
        return 'event id mismatch';
    }
    else if (!verify_sig(id, event.pubkey, sig)) {
        return 'invalid event signature';
    }
    else {
        return null;
    }
}
