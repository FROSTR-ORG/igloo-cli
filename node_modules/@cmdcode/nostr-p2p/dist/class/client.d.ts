import EventEmitter from './emitter.js';
import type { EventFilter, NodeConfig, NodeEventMap, SubConfig, SubResponse, NodeMessageMap, MessageTemplate, SubFilter, PubResponse, BroadcastResponse, MulticastResponse, EventConfig, DeliveryOptions } from '../types/index.js';
export default class NostrNode extends EventEmitter<NodeEventMap> {
    private readonly _config;
    private readonly _pool;
    private readonly _pubkey;
    private readonly _relays;
    private readonly _seckey;
    private readonly _inbox;
    private _filter;
    private _sub;
    constructor(relays: string[], seckey: string, options?: Partial<NodeConfig>);
    private _handler;
    private _publish;
    private _subscribe;
    get config(): NodeConfig;
    get filter(): EventFilter;
    get inbox(): NodeMessageMap;
    get pubkey(): string;
    get relays(): string[];
    broadcast(message: MessageTemplate, peers: string[], options?: DeliveryOptions): Promise<BroadcastResponse>;
    connect(timeout?: number): Promise<this>;
    close(): Promise<void>;
    request(message: MessageTemplate, peer_pk: string, options: DeliveryOptions): Promise<SubResponse>;
    multicast(message: MessageTemplate, peers: string[], options?: Partial<DeliveryOptions>): Promise<MulticastResponse>;
    publish(message: MessageTemplate, pubkey: string, options?: Partial<EventConfig>): Promise<PubResponse>;
    subscribe(filter: SubFilter, options?: Partial<SubConfig>): Promise<SubResponse>;
    update(filter: EventFilter): Promise<string | null>;
}
