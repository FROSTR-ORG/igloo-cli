export default class EventEmitter<T extends Record<string, any> = {}> {
    private readonly eventMap;
    constructor();
    private getEventHandlers;
    has<K extends keyof T>(eventName: K): boolean;
    on<K extends keyof T>(eventName: K, handler: (payload: T[K]) => void | Promise<void>): void;
    once<K extends keyof T>(eventName: K, handler: (payload: T[K]) => void | Promise<void>): void;
    within<K extends keyof T>(eventName: K, handler: (payload: T[K]) => void | Promise<void>, timeoutMs: number): void;
    emit<K extends keyof T>(eventName: K, payload: T[K]): void;
    off<K extends keyof T>(eventName: string, handler: (payload: T[K]) => void | Promise<void>): void;
    clear(eventName: string): void;
}
