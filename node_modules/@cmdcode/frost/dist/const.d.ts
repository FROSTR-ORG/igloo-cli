export declare const _0n: bigint;
export declare const _1n: bigint;
export declare const _P: bigint;
export declare const _N: bigint;
export declare const CURVE: Readonly<import("node_modules/@noble/curves/abstract/curve.js").BasicCurve<bigint> & {
    a: bigint;
    b: bigint;
    allowedPrivateKeyLengths?: readonly number[];
    wrapPrivateKey?: boolean;
    endo?: {
        beta: bigint;
        splitScalar: (k: bigint) => {
            k1neg: boolean;
            k1: bigint;
            k2neg: boolean;
            k2: bigint;
        };
    };
    isTorsionFree?: ((c: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>, point: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) => boolean) | undefined;
    clearCofactor?: ((c: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>, point: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) => import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) | undefined;
} & {
    hash: import("node_modules/@noble/curves/abstract/utils.js").CHash;
    hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
    randomBytes: (bytesLength?: number) => Uint8Array;
    lowS?: boolean;
    bits2int?: (bytes: Uint8Array) => bigint;
    bits2int_modN?: (bytes: Uint8Array) => bigint;
} & {
    nByteLength: number;
    nBitLength: number;
}>;
export declare const FIELD: Readonly<import("@noble/curves/abstract/modular").IField<bigint> & Required<Pick<import("@noble/curves/abstract/modular").IField<bigint>, "isOdd">>>;
export declare const POINT: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>;
export declare const DOMAIN = "FROST-secp256k1-SHA256-v1";
declare const _default: {
    _0n: bigint;
    _1n: bigint;
    _N: bigint;
    _P: bigint;
    CURVE: Readonly<import("node_modules/@noble/curves/abstract/curve.js").BasicCurve<bigint> & {
        a: bigint;
        b: bigint;
        allowedPrivateKeyLengths?: readonly number[];
        wrapPrivateKey?: boolean;
        endo?: {
            beta: bigint;
            splitScalar: (k: bigint) => {
                k1neg: boolean;
                k1: bigint;
                k2neg: boolean;
                k2: bigint;
            };
        };
        isTorsionFree?: ((c: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>, point: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) => boolean) | undefined;
        clearCofactor?: ((c: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>, point: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) => import("node_modules/@noble/curves/abstract/weierstrass.js").ProjPointType<bigint>) | undefined;
    } & {
        hash: import("node_modules/@noble/curves/abstract/utils.js").CHash;
        hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
        randomBytes: (bytesLength?: number) => Uint8Array;
        lowS?: boolean;
        bits2int?: (bytes: Uint8Array) => bigint;
        bits2int_modN?: (bytes: Uint8Array) => bigint;
    } & {
        nByteLength: number;
        nBitLength: number;
    }>;
    DOMAIN: string;
    FIELD: Readonly<import("@noble/curves/abstract/modular").IField<bigint> & Required<Pick<import("@noble/curves/abstract/modular").IField<bigint>, "isOdd">>>;
    POINT: import("node_modules/@noble/curves/abstract/weierstrass.js").ProjConstructor<bigint>;
};
export default _default;
