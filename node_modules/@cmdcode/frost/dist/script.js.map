{"version":3,"file":"script.js","sources":["../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_md.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@cmdcode/buff/dist/assert.js","../node_modules/@cmdcode/buff/dist/format/str.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/@cmdcode/buff/dist/encode.js","../node_modules/@cmdcode/buff/dist/format/big.js","../node_modules/@cmdcode/buff/dist/format/num.js","../node_modules/@cmdcode/buff/dist/utils.js","../node_modules/@cmdcode/buff/dist/format/buffer.js","../node_modules/@cmdcode/buff/dist/buff.js","../node_modules/@cmdcode/buff/dist/format/bin.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/curves/esm/abstract/utils.js","../node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/@noble/curves/esm/abstract/hash-to-curve.js","../node_modules/@noble/curves/esm/secp256k1.js","../src/const.ts","../src/ecc/util.ts","../src/ecc/hash.ts","../src/util/assert.ts","../src/util/helpers.ts","../src/ecc/group.ts","../src/lib/helpers.ts","../src/lib/commit.ts","../src/lib/context.ts","../src/ecc/state.ts","../src/lib/poly.ts","../src/lib/vss.ts","../src/lib/shares.ts","../src/lib/group.ts","../src/lib/sign.ts","../src/lib/ecdh.ts","../src/lib/recover.ts","../src/lib/refresh.ts"],"sourcesContent":["/**\n * Internal assertion helpers.\n * @module\n */\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","export function within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nexport function is_hex(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nexport function is_json(str) {\n    try {\n        JSON.parse(str);\n    }\n    catch {\n        throw new TypeError('JSON string is invalid!');\n    }\n}\nexport function is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\nexport function is_prefix(actual, target) {\n    if (actual !== target) {\n        throw new TypeError(`Bech32 prefix does not match: ${actual} !== ${target}`);\n    }\n}\n//# sourceMappingURL=assert.js.map","import { is_hex } from '../assert.js';\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nexport function strToBytes(str) {\n    return ec.encode(str);\n}\nexport function bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    is_hex(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nexport function hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\n//# sourceMappingURL=str.js.map","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nfunction isArrayOf(isString, arr) {\n    if (!Array.isArray(arr))\n        return false;\n    if (arr.length === 0)\n        return true;\n    if (isString) {\n        return arr.every((item) => typeof item === 'string');\n    }\n    else {\n        return arr.every((item) => Number.isSafeInteger(item));\n    }\n}\n// no abytes: seems to have 10% slowdown. Why?!\nfunction afn(input) {\n    if (typeof input !== 'function')\n        throw new Error('function expected');\n    return true;\n}\nfunction astr(label, input) {\n    if (typeof input !== 'string')\n        throw new Error(`${label}: string expected`);\n    return true;\n}\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`invalid integer: ${n}`);\n}\nexport const assertNumber = anumber;\nfunction aArr(input) {\n    if (!Array.isArray(input))\n        throw new Error('array expected');\n}\nfunction astrArr(label, input) {\n    if (!isArrayOf(true, input))\n        throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label, input) {\n    if (!isArrayOf(false, input))\n        throw new Error(`${label}: array of numbers expected`);\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters) {\n    // mapping 1 to \"b\"\n    const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n    const len = lettersA.length;\n    astrArr('alphabet', lettersA);\n    // mapping \"b\" to 1\n    const indexes = new Map(lettersA.map((l, i) => [l, i]));\n    return {\n        encode: (digits) => {\n            aArr(digits);\n            return digits.map((i) => {\n                if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n                    throw new Error(`alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`);\n                return lettersA[i];\n            });\n        },\n        decode: (input) => {\n            aArr(input);\n            return input.map((letter) => {\n                astr('alphabet.decode', letter);\n                const i = indexes.get(letter);\n                if (i === undefined)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n                return i;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    astr('join', separator);\n    return {\n        encode: (from) => {\n            astrArr('join.decode', from);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            astr('join.decode', to);\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    anumber(bits);\n    astr('padding', chr);\n    return {\n        encode(data) {\n            astrArr('padding.encode', data);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            astrArr('padding.decode', input);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('padding: invalid, string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                const last = end - 1;\n                const byte = last * bits;\n                if (byte % 8 === 0)\n                    throw new Error('padding: invalid, string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    afn(fn);\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n    aArr(data);\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data, (d) => {\n        anumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`invalid integer: ${d}`);\n        return d;\n    });\n    const dlen = digits.length;\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < dlen; i++) {\n            const digit = digits[i];\n            const fromCarry = from * carry;\n            const digitBase = fromCarry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                fromCarry / from !== carry ||\n                digitBase - digit !== fromCarry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            const div = digitBase / to;\n            carry = digitBase % to;\n            const rounded = Math.floor(div);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\nconst powers = /* @__PURE__ */ (() => {\n    let res = [];\n    for (let i = 0; i < 40; i++)\n        res.push(2 ** i);\n    return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data, from, to, padding) {\n    aArr(data);\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const max = powers[from];\n    const mask = powers[to] - 1;\n    const res = [];\n    for (const n of data) {\n        anumber(n);\n        if (n >= max)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        const pow = powers[pos];\n        if (pow === undefined)\n            throw new Error('invalid carry');\n        carry &= pow - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry > 0)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    anumber(num);\n    const _256 = 2 ** 8;\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), _256, num);\n        },\n        decode: (digits) => {\n            anumArr('radix.decode', digits);\n            return Uint8Array.from(convertRadix(digits, num, _256));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    anumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            anumArr('radix2.decode', digits);\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    afn(fn);\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    anumber(len);\n    afn(fn);\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const sum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(sum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const oldChecksum = data.slice(-len);\n            const newChecksum = fn(payload).slice(0, len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\n/**\n * base16 encoding.\n */\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32nopad = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32hexnopad = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\n/**\n * base64 with padding. For no padding, use `base64nopad`.\n * @example\n * const b = base64.decode('A951'); // Uint8Array.from([ 3, 222, 117 ])\n * base64.encode(b); // 'A951'\n */\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\n/**\n * base64 without padding.\n */\nexport const base64nopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => chain(radix(58), alphabet(abc), join(''));\n/**\n * Base58: base64 without characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n */\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n/**\n * XMR version of base58.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        astr('bech32.encode prefix', prefix);\n        if (isBytes(words))\n            words = Array.from(words);\n        anumArr('bech32.encode', words);\n        const plen = prefix.length;\n        if (plen === 0)\n            throw new TypeError(`Invalid prefix length ${plen}`);\n        const actualLength = plen + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        astr('bech32.decode input', str);\n        const slen = str.length;\n        if (slen < 8 || (limit !== false && slen > limit))\n            throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        const sepIndex = lowered.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = lowered.slice(0, sepIndex);\n        const data = lowered.slice(sepIndex + 1);\n        if (data.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!data.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    function encodeFromBytes(prefix, bytes) {\n        return encode(prefix, toWords(bytes));\n    }\n    return {\n        encode,\n        decode,\n        encodeFromBytes,\n        decodeToBytes,\n        decodeUnsafe,\n        fromWords,\n        fromWordsUnsafe,\n        toWords,\n    };\n}\n/**\n * Low-level bech32 operations. Operates on words.\n */\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n */\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\n/**\n * hex string decoder.\n * @example\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n */\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2 !== 0)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n//# sourceMappingURL=index.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToStr, bytesToHex, hexToBytes, strToBytes } from './format/str.js';\nimport { base58check, base64, base64urlnopad, bech32, bech32m } from '@scure/base';\nexport const Hex = {\n    encode: bytesToHex,\n    decode: hexToBytes\n};\nexport const Txt = {\n    encode: strToBytes,\n    decode: bytesToStr\n};\nexport const B58chk = {\n    encode: (data) => base58check(sha256).encode(data),\n    decode: (data) => base58check(sha256).decode(data)\n};\nexport const Base64 = {\n    encode: (data) => base64.encode(data),\n    decode: (data) => base64.decode(data)\n};\nexport const B64url = {\n    encode: (data) => base64urlnopad.encode(data),\n    decode: (data) => base64urlnopad.decode(data)\n};\nexport const Bech32 = {\n    to_words: bech32.toWords,\n    to_bytes: bech32.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return bech32.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = bech32.decode(data, limit);\n        return { prefix, words };\n    }\n};\nexport const Bech32m = {\n    to_words: bech32m.toWords,\n    to_bytes: bech32m.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return bech32m.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = bech32m.decode(data, limit);\n        return { prefix, words };\n    }\n};\n//# sourceMappingURL=encode.js.map","const _0n = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nexport function bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n//# sourceMappingURL=big.js.map","import { is_safe_num } from '../assert.js';\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nexport function numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num(num);\n    }\n    return num;\n}\n//# sourceMappingURL=num.js.map","import { within_size } from './assert.js';\nexport function is_hex(input) {\n    if (input.match(/[^a-fA-F0-9]/) === null &&\n        input.length % 2 === 0) {\n        return true;\n    }\n    return false;\n}\nexport function is_bytes(input) {\n    if (typeof input === 'string' && is_hex(input)) {\n        return true;\n    }\n    else if (typeof input === 'number' ||\n        typeof input === 'bigint' ||\n        input instanceof Uint8Array) {\n        return true;\n    }\n    else if (Array.isArray(input) &&\n        input.every(e => typeof e === 'number')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nexport function join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\nexport function bigint_replacer(_, v) {\n    return typeof v === 'bigint'\n        ? `${v}n`\n        : v;\n}\nexport function bigint_reviver(_, v) {\n    return typeof v === 'string' && /^[0-9]+n$/.test(v)\n        ? BigInt(v.slice(0, -1))\n        : v;\n}\nexport function parse_data(data_blob, chunk_size, total_size) {\n    const len = data_blob.length, count = total_size / chunk_size;\n    if (total_size % chunk_size !== 0) {\n        throw new TypeError(`Invalid parameters: ${total_size} % ${chunk_size} !== 0`);\n    }\n    if (len !== total_size) {\n        throw new TypeError(`Invalid data stream: ${len} !== ${total_size}`);\n    }\n    if (len % chunk_size !== 0) {\n        throw new TypeError(`Invalid data stream: ${len} % ${chunk_size} !== 0`);\n    }\n    const chunks = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const idx = i * chunk_size;\n        chunks[i] = data_blob.subarray(idx, idx + chunk_size);\n    }\n    return chunks;\n}\n//# sourceMappingURL=utils.js.map","import { bigToBytes } from './big.js';\nimport { numToBytes } from './num.js';\nimport { hexToBytes } from './str.js';\nimport * as util from '../utils.js';\nexport function buffer_data(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else if (data instanceof Uint8Array) {\n        return util.set_buffer(data, size, endian);\n    }\n    else if (Array.isArray(data)) {\n        const bytes = data.map(e => buffer_data(e, size, endian));\n        return util.join_array(bytes);\n    }\n    else if (typeof data === 'string') {\n        return hexToBytes(data, size, endian);\n    }\n    else if (typeof data === 'bigint') {\n        return bigToBytes(data, size, endian);\n    }\n    else if (typeof data === 'number') {\n        return numToBytes(data, size, endian);\n    }\n    else if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw new TypeError('Unsupported format:' + String(typeof data));\n}\n//# sourceMappingURL=buffer.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport * as assert from './assert.js';\nimport * as encoder from './encode.js';\nimport * as fmt from './format/index.js';\nimport * as util from './utils.js';\nexport class Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = buffer; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.bech32m = bech32mToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = fmt.strToBytes; }\n    static { this.decode = fmt.bytesToStr; }\n    static { this.parse = parse_data; }\n    static { this.is_bytes = util.is_bytes; }\n    static { this.is_hex = util.is_hex; }\n    static { this.is_equal = is_equal; }\n    static random(size = 32) {\n        const rand = randomBytes(size);\n        return new Buff(rand, size);\n    }\n    static now(size = 4) {\n        const stamp = Math.floor(Date.now() / 1000);\n        return new Buff(stamp, size);\n    }\n    constructor(data, size, endian) {\n        if (data instanceof Buff &&\n            size === undefined) {\n            return data;\n        }\n        const buffer = fmt.buffer_data(data, size, endian);\n        super(buffer);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.to_num();\n    }\n    get big() {\n        return this.to_big();\n    }\n    get str() {\n        return this.to_str();\n    }\n    get hex() {\n        return this.to_hex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.to_bin();\n    }\n    get b58chk() {\n        return this.to_b58chk();\n    }\n    get base64() {\n        return this.to_base64();\n    }\n    get b64url() {\n        return this.to_b64url();\n    }\n    get digest() {\n        return this.to_hash();\n    }\n    get id() {\n        return this.to_hash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    to_num(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return fmt.bytesToNum(bytes);\n    }\n    to_big(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return fmt.bytesToBig(bytes);\n    }\n    to_bin() {\n        return fmt.bytesToBin(this);\n    }\n    to_hash() {\n        const digest = sha256(this);\n        return new Buff(digest);\n    }\n    to_json(reviver) {\n        if (reviver === undefined) {\n            reviver = util.bigint_reviver;\n        }\n        const str = fmt.bytesToStr(this);\n        return JSON.parse(str, reviver);\n    }\n    to_bech32(prefix, limit) {\n        const { encode, to_words } = encoder.Bech32;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_bech32m(prefix, limit) {\n        const { encode, to_words } = encoder.Bech32m;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_str() { return fmt.bytesToStr(this); }\n    to_hex() { return fmt.bytesToHex(this); }\n    to_bytes() { return new Uint8Array(this); }\n    to_b58chk() { return encoder.B58chk.encode(this); }\n    to_base64() { return encoder.Base64.encode(this); }\n    to_b64url() { return encoder.B64url.encode(this); }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    equals(data) {\n        return buffer(data).hex === this.hex;\n    }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    set(array, offset) {\n        this.set(array, offset);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    add_varint(endian) {\n        const size = Buff.calc_varint(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    toJSON() {\n        return this.hex;\n    }\n    toString() {\n        return this.hex;\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = util.join_array(bytes);\n        return new Buff(joined);\n    }\n    static sort(arr, size) {\n        const hex = arr.map(e => buffer(e, size).hex);\n        hex.sort();\n        return hex.map(e => Buff.hex(e, size));\n    }\n    static calc_varint(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(fmt.binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(fmt.strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data, replacer) {\n    if (replacer === undefined) {\n        replacer = util.bigint_replacer;\n    }\n    const str = JSON.stringify(data, replacer);\n    return new Buff(fmt.strToBytes(str));\n}\nfunction base64ToBuff(data) {\n    return new Buff(encoder.Base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(encoder.B64url.decode(data));\n}\nfunction bech32ToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = encoder.Bech32;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        assert.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction bech32mToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = encoder.Bech32m;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        assert.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction b58chkToBuff(data) {\n    return new Buff(encoder.B58chk.decode(data));\n}\nfunction parse_data(data_blob, chunk_size, total_size) {\n    const bytes = fmt.buffer_data(data_blob);\n    const chunks = util.parse_data(bytes, chunk_size, total_size);\n    return chunks.map(e => Buff.bytes(e));\n}\nfunction is_equal(a, b) {\n    return new Buff(a).hex === new Buff(b).hex;\n}\nexport function buffer(bytes, size, end) {\n    return new Buff(bytes, size, end);\n}\nexport class Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    read_varint(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).to_num(endian);\n            case (num === 0xFE):\n                return this.read(4).to_num(endian);\n            case (num === 0xFF):\n                return this.read(8).to_num(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\n//# sourceMappingURL=buff.js.map","export function binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nexport function bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n//# sourceMappingURL=bin.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField, } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","import { mod } from './modular.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << (8 * length))\n        throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255)\n        throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x: x, y: y };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve(scalars) {\n            if (!Array.isArray(scalars))\n                throw new Error('mapToCurve: expected array of bigints');\n            for (const i of scalars)\n                if (typeof i !== 'bigint')\n                    throw new Error('mapToCurve: expected array of bigints');\n            const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { secp256k1 } from '@noble/curves/secp256k1'\nimport { Field }     from '@noble/curves/abstract/modular'\n\n// Optimizes use of bigints as constants.\nexport const _0n = BigInt(0)\nexport const _1n = BigInt(1)\n\n// Constants for the secp256k1 curve.\nexport const _P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f')\nexport const _N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141')\n\n// Base constants for the secp256k1 curve.\nexport const CURVE = secp256k1.CURVE\nexport const FIELD = Field(_N, 32, true)\nexport const POINT = secp256k1.ProjectivePoint\n\n// Context string for this cryptography domain.\nexport const DOMAIN = 'FROST-secp256k1-SHA256-v1'\n\nexport default { _0n, _1n, _N, _P, CURVE, DOMAIN, FIELD, POINT }\n","import { Buff, Bytes } from '@cmdcode/buff'\nimport { mod, pow }    from '@noble/curves/abstract/modular'\n\nimport CONST from '@/const.js'\n\nconst { POINT, _N, _P } = CONST\n\nexport function mod_n (x : bigint) {\n  return mod(x, _N)\n}\n\nexport function mod_p (x : bigint) {\n  return mod(x, _P)\n}\n\nexport function pow_n (x : number | bigint, p : number | bigint) {\n  if (typeof x === 'number') x = BigInt(x)\n  if (typeof p === 'number') p = BigInt(p)\n  return pow(x, p, _N)\n}\n\nexport function str_to_bytes (str : string) {\n  return new TextEncoder().encode(str)\n}\n\nexport function bytes_to_str (bytes : Uint8Array) {\n  return new TextDecoder().decode(bytes)\n}\n\nexport function lift_x (pubkey : Bytes) {\n  let bytes = Buff.bytes(pubkey)\n  if (bytes.length < 32 || bytes.length > 33) {\n    throw new Error('invalid pubkeky: ' + bytes.hex + ' ' + bytes.length)\n  } else if (bytes.length === 32) {\n    bytes = bytes.prepend(2)\n  }\n  return POINT.fromHex(bytes.hex)\n}\n","// As specified in draft-irtf-cfrg-frost-15, section 6.5.\n// https://www.ietf.org/archive/id/draft-irtf-cfrg-frost-15.html#name-frostsecp256k1-sha-256\n\nimport { Buff }         from '@cmdcode/buff'\nimport { sha256 }       from '@noble/hashes/sha256'\nimport { DOMAIN, _N }   from '@/const.js'\nimport { str_to_bytes } from './util.js'\n\nimport { hash_to_field, Opts } from '@noble/curves/abstract/hash-to-curve'\n\nconst OPT = { m: 1, p: _N, k: 128, expand: 'xmd', hash: sha256 }\n\nfunction get_opts (DST : string) {\n  return { ...OPT, DST } as Opts\n}\n\nexport function H1 (msg : Uint8Array) {\n  const DST  = DOMAIN + 'rho'\n  const nums = hash_to_field(msg, 1, get_opts(DST))\n  return Buff.big(nums[0][0], 32)\n}\n\nexport function H2 (msg : Uint8Array) {\n  const DST  = DOMAIN + 'chal'\n  const nums = hash_to_field(msg, 1, get_opts(DST))\n  return Buff.big(nums[0][0], 32)\n}\n\nexport function H3 (msg : Uint8Array) {\n  const DST  = DOMAIN + 'nonce'\n  const nums = hash_to_field(msg, 1, get_opts(DST))\n  return Buff.big(nums[0][0], 32)\n}\n\nexport function H4 (msg : Uint8Array) {\n  const DST  = str_to_bytes(DOMAIN + 'msg')\n  const hash = sha256(new Uint8Array([ ...DST, ...msg ]))\n  return new Buff(hash)\n}\n\nexport function H5 (msg : Uint8Array) {\n  const DST  = str_to_bytes(DOMAIN + 'com')\n  const hash = sha256(new Uint8Array([ ...DST, ...msg ]))\n  return new Buff(hash)\n}\n","import { Buff, Bytes } from '@cmdcode/buff'\n\nexport function ok (value : unknown, message ?: string) : asserts value {\n  if (value === false) throw new Error(message ?? 'Assertion failed!')\n}\n\nexport function exists <T> (\n  input ?: T | null\n) : asserts input is NonNullable<T> {\n  if (typeof input === 'undefined') {\n    throw new TypeError('Input is undefined!')\n  }\n  if (input === null) {\n    throw new TypeError('Input is null!')\n  }\n}\n\nexport function size (\n  input : Bytes,\n  size  : number\n) : boolean {\n  const bytes = Buff.bytes(input)\n  if (bytes.length !== size) {\n    throw new Error(`Invalid byte size: ${bytes.hex} !== ${size}`)\n  }\n  return true\n}\n\nexport function is_included <T> (\n  array : T[],\n  item  : T\n) {\n  if (!array.includes(item)) {\n    throw new Error('item is not included in array')\n  }\n}\n\nexport function is_unique_set <T> (array : T[]) {\n  for (const x of array) {\n    const c = array.filter(e => e === x).length\n    if (c !== 1) {\n      throw new Error('item in set is not unique: ' + String(x))\n    }\n  }\n}\n\nexport function is_equal_set <T> (array : T[]) {\n  if (!array.every(e => e === array[0])) {\n    throw new Error('set does not have equal items')\n  }\n}\n\nexport function equal_arr_size <T> (\n  array_a : T[],\n  array_b : T[]\n) {\n  if (array_a.length !== array_b. length) {\n    throw new Error(`array lengths are unequal: ${array_a.length} !== ${array_b.length}`)\n  }\n}\n","import { Buff, Bytes } from '@cmdcode/buff'\n\nexport function random_bytes (size = 32) {\n  return Buff.random(size)\n}\n\nexport function count_scalars (x_j : bigint, L : bigint[]) {\n  return L.filter(x => x === x_j).length\n}\n\nexport function get_record <T extends { idx : number }> (\n  records : T[],\n  idx     : number\n) {\n  const record = records.find(e => e.idx === idx)\n  if (record === undefined) {\n    throw new Error('record not found for index: ' + idx)\n  }\n  return record\n}\n\nexport function taghash (tag : string) : Buff {\n  const hash = Buff.str(tag).digest\n  return Buff.join([ hash, hash ])\n}\n\nexport function hash340 (\n  tag : string,\n  ...data : Bytes[]\n) : Buff {\n  const hash  = taghash(tag)\n  const bytes = data.map(e => Buff.bytes(e))\n  return Buff.join([ hash, ...bytes ]).digest\n}\n","// As specified in draft-irtf-cfrg-frost-15, section 3.1.\n// https://www.ietf.org/archive/id/draft-irtf-cfrg-frost-15.html\n\nimport { Buff, Bytes } from '@cmdcode/buff'\nimport { secp256k1 }   from '@noble/curves/secp256k1'\nimport { assert }      from '@/util/index.js'\nimport { mod_n }       from './util.js'\n\nimport type { CurveElement } from '@/types/index.js'\n\nimport CONST from '@/const.js'\n\nconst { POINT, _0n, _1n, _N } = CONST\n\nexport function Order () : bigint {\n  return _N\n}\n\nexport function Identity () : CurveElement {\n  return new POINT(_0n, _1n, _0n)\n}\n\nexport function RandomScalar () {\n  const bigint = Buff.random(32).big\n  return mod_n(bigint)\n}\n\nexport function ElementAdd (\n  A : CurveElement | null,\n  B : CurveElement | null\n) : CurveElement {\n  if (A === null && B === null) {\n    throw new Error('both points are null!')\n  } else if (A === null) {\n    assert.exists(B)\n    return B as CurveElement\n  } else if (B === null) {\n    return A\n  } else {\n    const C = A.add(B)\n    C.assertValidity()\n    return C as CurveElement\n  }\n}\n\nexport function ElementAddMany (\n  elem : Array<CurveElement | null>\n) : CurveElement {\n  const sum = elem.slice(1).reduce((p, c) => ElementAdd(p, c), elem[0])\n  if (sum === null) {\n    throw new Error('Summed point is null.')\n  }\n  sum.assertValidity()\n  return sum\n}\n\nexport function ScalarMulti (\n  A : CurveElement,\n  k : bigint\n) {\n  const pt = A.multiply(k)\n  pt.assertValidity()\n  return pt\n}\n\nexport function ScalarBaseMulti (k : bigint) {\n  const base = secp256k1.ProjectivePoint.BASE\n  const pt   = base.multiply(k)\n  pt.assertValidity()\n  return pt\n}\n\nexport function SerializeElement (A : CurveElement) {\n  return Buff.bytes(A.toRawBytes(true))\n}\n\nexport function DeserializeElement (bytes : Bytes) {\n  const hex = Buff.bytes(bytes).hex\n  return POINT.fromHex(hex)\n}\n\nexport function SerializeScalar (scalar : Bytes) {\n  return new Buff(scalar, 32)\n}\n\nexport function DeserializeScalar (bytes : Bytes) {\n  return Buff.bytes(bytes).big\n}\n","import { Buff, Bytes }     from '@cmdcode/buff'\nimport { G, H }            from '@/ecc/index.js'\nimport { lift_x, mod_n }          from '@/ecc/util.js'\nimport { _0n, _1n }        from '@/const.js'\nimport { assert, hash340 } from '@/util/index.js'\n\n/**\n * Generates a secret key.\n */\nexport function generate_seckey (\n  aux ?: Bytes\n) : Buff {\n  const aux_bytes = (aux !== undefined)\n    ? Buff.bytes(aux, 32)\n    : Buff.random(32)\n  return H.H3(aux_bytes)\n}\n\n/**\n * Generates a secret nonce using a secret key, and optional auxiliary value.\n */\nexport function generate_nonce (\n  secret    : Bytes,\n  aux_seed ?: Bytes\n) : Buff {\n  const aux = (aux_seed !== undefined)\n    ? Buff.bytes(aux_seed, 32)\n    : Buff.random(32)\n  const secret_seed  = Buff.join([ aux, secret ])\n  return H.H3(secret_seed)\n}\n\nexport function tweak_seckey (\n  seckey : Bytes,\n  tweak  : Bytes\n) {\n  const coeff   = Buff.bytes(tweak).big \n  const secret  = Buff.bytes(seckey).big\n  const tweaked = mod_n(secret * coeff)\n  return Buff.big(tweaked).hex\n}\n\nexport function get_pubkey (secret : Bytes) {\n  const scalar = Buff.bytes(secret).big\n  const point  = G.ScalarBaseMulti(scalar)\n  return G.SerializeElement(point).hex\n}\n\nexport function tweak_pubkey (\n  pubkey : Bytes,\n  tweak  : Bytes\n) {\n  const coeff = Buff.bytes(tweak).big\n  let   point = lift_x(pubkey)\n        point = point.multiply(coeff)\n  return G.SerializeElement(point).hex\n}\n\n/**\n * Computes a BIP340 compatible challenge message.\n */\nexport function get_challenge (\n  pnonce  : Bytes,\n  pubkey  : Bytes,\n  message : Bytes\n) {\n  const grp_pk = convert_pubkey(pubkey, 'bip340')\n  const grp_pn = convert_pubkey(pnonce, 'bip340')\n  assert.size(grp_pk, 32)\n  assert.size(grp_pn, 32)\n  const digest = hash340('BIP0340/challenge', grp_pn, grp_pk, message)\n  return digest.big\n}\n\nexport function convert_pubkey (\n  pubkey : Bytes,\n  type   : 'ecdsa' | 'bip340'\n) : string {\n  const pub = Buff.bytes(pubkey)\n  if (type === 'ecdsa') {\n    return pub.length === 32\n      ? pub.prepend(2).hex\n      : pub.hex\n  } else if (type === 'bip340') {\n    return (pub.length === 33)\n      ? pub.slice(1).hex\n      : pub.hex\n  } else {\n    throw new Error('invalid pubkey type')\n  }\n}","import { Buff, Bytes }        from '@cmdcode/buff'\nimport { H, G }               from '@/ecc/index.js'\nimport { _0n, _1n }           from '@/const.js'\nimport { assert, get_record } from '@/util/index.js'\n\nimport {\n  generate_nonce,\n  get_pubkey\n} from './helpers.js'\n\nimport type {\n  CurveElement,\n  CommitmentPackage,\n  SecretShare,\n  PublicNonce,\n  BindFactor\n} from '@/types/index.js'\n\nexport function get_nonce_ids (\n  pnonces : PublicNonce[]\n) : bigint[] {\n  return pnonces.map(pn => BigInt(pn.idx))\n}\n\nexport function get_commits_prefix (\n  pnonces : PublicNonce[]\n) {\n  // TODO: commits need to be sorted by idx.\n  let enc_group_commit : Bytes[] = []\n  const sorted_pnonces = pnonces.sort((a, b) => a.idx - b.idx)\n  for (const { idx, hidden_pn, binder_pn } of sorted_pnonces) {\n    const enc_commit = [ G.SerializeScalar(idx), hidden_pn, binder_pn ]\n    enc_group_commit = [ ...enc_group_commit, ...enc_commit ]\n  }\n  return Buff.join(enc_group_commit)\n}\n\n/**\n * Constructs a byte-prefix for the signing session.\n */\nexport function get_group_prefix (\n  pnonces  : PublicNonce[],\n  group_pk : string,\n  message  : string\n) : Buff {\n  const msg_bytes   = Buff.hex(message)\n  const msg_hash    = H.H4(msg_bytes)\n  const commit_list = get_commits_prefix(pnonces)\n  const commit_hash = H.H5(commit_list)\n  return Buff.join([ group_pk, msg_hash, commit_hash ])\n}\n\nexport function get_bind_factor (\n  binders : BindFactor[],\n  idx     : number\n) : bigint {\n  for (const bind of binders) {\n    if (idx === bind.idx) {\n      return Buff.bytes(bind.factor).big\n    }\n  }\n  throw new Error('invalid participant')\n}\n\n/**\n * Computes the binding values for each public nonce.\n */\nexport function get_group_binders (\n  nonces : PublicNonce[],\n  prefix : Bytes\n) : BindFactor[] {\n  return nonces.map(({ idx }) => {\n    const scalar    = G.SerializeScalar(idx)\n    const rho_input = Buff.join([ prefix, scalar ])\n    return { idx, factor: H.H1(rho_input).hex }\n  })\n}\n\n/**\n * Computes the group public nonce for the signing session.\n */\nexport function get_group_pubnonce (\n  pnonces : PublicNonce[],\n  binders : BindFactor[]\n) : string {\n  let group_commit : CurveElement | null = null\n\n  for (const { idx, binder_pn, hidden_pn } of pnonces) {\n    const hidden_elem   = G.DeserializeElement(hidden_pn)\n    const binding_elem  = G.DeserializeElement(binder_pn)\n    const bind_factor   = get_bind_factor(binders, idx)\n    const factored_elem = G.ScalarMulti(binding_elem, bind_factor)\n    group_commit = G.ElementAdd(group_commit, hidden_elem)\n    group_commit = G.ElementAdd(group_commit, factored_elem)\n  }\n  assert.exists(group_commit)\n  return G.SerializeElement(group_commit).hex\n}\n\n/**\n * Creates a commitment package for a FROST signing session.\n */\nexport function create_commit_pkg (\n  secret_share : SecretShare,\n  hidden_seed ?: string,\n  binder_seed ?: string\n) : CommitmentPackage {\n  const { idx, seckey } = secret_share\n  const binder_sn = generate_nonce(seckey, binder_seed).hex\n  const hidden_sn = generate_nonce(seckey, hidden_seed).hex\n  const binder_pn = get_pubkey(binder_sn)\n  const hidden_pn = get_pubkey(hidden_sn)\n  return { idx, binder_pn, binder_sn, hidden_pn, hidden_sn }\n}\n\nexport function get_commit_pkg (\n  commits : CommitmentPackage[],\n  share   : SecretShare\n) : CommitmentPackage {\n  const idx    = share.idx\n  return get_record(commits, idx)\n}\n","import { Buff, Bytes }     from '@cmdcode/buff'\nimport { _1n, _N }         from '@/const.js'\nimport { get_point_state } from '@/ecc/state.js'\nimport { lift_x }          from '@/ecc/util.js'\nimport { get_challenge }   from '@/lib/helpers.js'\n\nimport {\n  get_group_binders,\n  get_group_prefix,\n  get_group_pubnonce,\n  get_nonce_ids\n} from './commit.js'\n\nimport type {\n  GroupCommitContext,\n  GroupKeyContext,\n  GroupSigningCtx,\n  PublicNonce\n} from '@/types/index.js'\n\n/**\n * Get the initial context of the group key, plus any tweaks.\n */\nexport function get_group_key_context (\n  pubkey  : Bytes,\n  tweaks? : Bytes[]\n) : GroupKeyContext {\n  // Initialize internal pubkey as group pubkey.\n  const int_pk   = Buff.bytes(pubkey).hex\n  // Get initial state of pubkey as internal state.\n  const int_pt   = lift_x(int_pk)\n  // Calculate the group state (with any additional tweaks).\n  const group_pt = get_point_state(int_pt, tweaks)\n  // Set the group pubkey based on the group point (after tweaks).\n  const group_pk = group_pt.point.toHex(true)\n  // Return both keys and states.\n  return { int_pk, int_pt, group_pk, group_pt }\n}\n\n/**\n * Get the remaining context of the signing session.\n */\nexport function get_group_commit_context (\n  key_ctx : GroupKeyContext,\n  pnonces : PublicNonce[],\n  message : string,\n) : GroupCommitContext {\n  // Set the group pubkey from the key context.\n  const group_pubkey = key_ctx.group_pk\n  // Calculate the prefix for making the binding commitments.\n  const bind_prefix  = get_group_prefix(pnonces, group_pubkey, message).hex\n  // Compute the binding values for each nonce.\n  const bind_factors = get_group_binders(pnonces, bind_prefix)\n  // Compute the group nonce value.\n  const group_pn     = get_group_pubnonce(pnonces, bind_factors)\n  // Compile a list of identifiers from the nonces.\n  const indexes      = get_nonce_ids(pnonces)\n  // Compute the challenge hash for the signing session.\n  const challenge    = get_challenge(group_pn, group_pubkey, message)\n  // Format the message to be signed as a hex string.\n  message = Buff.bytes(message).hex\n  // Return the context object.\n  return { bind_prefix, bind_factors, challenge, pnonces, group_pn, indexes, message }\n}\n\n/**\n * Get the full context of the signing session.\n */\nexport function get_group_signing_ctx (\n  group_pk : Bytes,\n  pnonces  : PublicNonce[],\n  message  : string,\n  tweaks?  : string[]\n) : GroupSigningCtx {\n  // Get the key context for the session.\n  const key_ctx = get_group_key_context(group_pk, tweaks)\n  // Get the remaining context for the session.\n  const com_ctx = get_group_commit_context(key_ctx, pnonces, message)\n  // Return the full context object.\n  return { ...key_ctx, ...com_ctx }\n}\n","import { Buff, Bytes }  from '@cmdcode/buff'\nimport { _0n, _1n, _N } from '@/const.js'\nimport { mod_n }        from './util.js'\nimport * as G           from './group.js'\n\nimport type {\n  CurveElement,\n  PointState\n} from '@/types/index.js'\n\n/**\n * Computes the accumulative parity state for a given point,\n * with optional key tweaks provided.\n */\n\nexport function get_point_state (\n  element : CurveElement,\n  tweaks  : Bytes[] = []\n) : PointState {\n  const ints = tweaks.map(e => Buff.bytes(e).big)\n  const pos  = _1n\n  const neg  = _N - pos\n\n  // Define our working variables.\n  let point : CurveElement = element,\n      parity = pos, // Handles negation for current round.\n      state  = pos, // Stores the accumulated (negated) tweak.\n      tweak  = _0n  // Stores the accumulated (negated) tweak.\n\n  // Iterate through the tweaks:\n  for (const t of ints) {\n    // Convert the tweak bigint into a point on the curve.\n    const tG = G.ScalarBaseMulti(t)\n    // Set the parity value based on the point's y-coordinate.\n    parity = point.hasEvenY() ? pos : neg\n    // Negate the point if the parity is odd.\n    point = (parity === neg) ? point.negate() : point\n    // Add the tweak point to the current point.\n    point = G.ElementAdd(point, tG)\n    // Assert that point is valid.\n    point.assertValidity()\n    // Update the parity state with the current value.\n    state = mod_n(parity * state)\n    // Update the tweak state with the current value.\n    tweak = mod_n(t + (parity * tweak))\n  }\n\n  parity = point.hasEvenY() ? pos : neg\n\n  return { parity, point, state, tweak }\n}\n","import { _0n, _1n, FIELD }  from '@/const.js'\nimport { mod_n }            from '@/ecc/util.js'\nimport { assert }           from '@/util/index.js'\n\n/**\n * Evaluates a polynomial at a given value `x` using the provided coefficients `L`.\n * The polynomial is of the form:\n * \n * L[0] + L[1] * x + L[2] * x^2 + ... + L[n] * x^n\n * \n * The coefficients are processed in reverse order, using Horner's method\n * to optimize the computation.\n * \n * @param L : Array of coefficients in ascending order of powers.\n * @param x : The value at which to evaluate the polynomial.\n * @returns : The result of the polynomial evaluation.\n * @throws  : Will throw an error if `x` is zero.\n */\nexport function evaluate_x (\n  L: bigint[],\n  x: bigint\n) {\n  if (x === _0n) {\n    throw new Error('x is zero')\n  }\n  \n  // Initialize the result to zero.\n  let value = _0n\n  \n  // Iterate over the coefficients in reverse order:\n  for (const coeff of [ ...L ].reverse()) {\n    // Multiply the current value by x (shift to the next power of x).\n    value *= x\n    // Add the current coefficient to the value.\n    value += coeff\n    // Ensure the result is reduced to the field value.\n    value = mod_n(value)\n  }\n  \n  // Return the final evaluated value of the polynomial.\n  return value\n}\n\n/**\n * Interpolates a polynomial at the root based on the given points using Lagrange interpolation.\n * Each point in the input is treated as (x, y) where `x` is the x-coordinate and `y` is the\n * corresponding y-coordinate.\n * \n * The function returns the evaluated polynomial at the root (i.e., when x = 0).\n * \n * @param points An array of points, where each point is a tuple [x, y] of bigints.\n * @returns      The value of the interpolated polynomial at the root (x = 0).\n */\nexport function interpolate_root (\n  points: bigint[][]\n) {\n  // Extract the x-coordinates from the points.\n  const coeffs = points.map(e => e[0])\n  \n  // Initialize the polynomial result to zero.\n  let p = _0n\n  \n  // Loop through each point [x, y] in the provided points:\n  for (const [ x, y ] of points) {\n    // Interpolate and get the delta value for the current x-coordinate.\n    const delta = interpolate_x(coeffs, x)\n    // Multiply delta by the y-coordinate of the current point and add to the result.\n    p += delta * y\n    // Reduce the result to the field value (mod n).\n    p = mod_n(p)\n  }\n  \n  // Return the final interpolated value at the root (x = 0).\n  return p\n}\n\n/**\n * Computes the Lagrange interpolation factor for a given x-coordinate `x` in the polynomial\n * defined by the set of x-coordinates `L`. This is a helper function used for Lagrange interpolation.\n * \n * It returns the value of the Lagrange basis polynomial at `x`, which is the quotient of\n * the product of differences between `x_j` values in `L` and `x`, divided by the difference\n * in corresponding denominators.\n * \n * @param L Array of x-coordinates (bigints) representing the known points.\n * @param x The x-coordinate for which to compute the interpolation factor.\n * @returns The computed Lagrange interpolation factor for the given x.\n * @throws  Will throw an error if `x` is not included in `L` or if the set `L` contains duplicates.\n */\nexport function interpolate_x (\n  L: bigint[],\n  x: bigint\n): bigint {\n  // Ensure x is included in L and that L has unique elements.\n  assert.is_included(L, x)\n  assert.is_unique_set(L)\n\n  // Initialize numerator and denominator for the interpolation factor.\n  let numerator   = _1n,\n      denominator = _1n\n\n  // Loop through each x_j in L to calculate the Lagrange basis polynomial:\n  for (const x_j of L) {\n    // Skip the current x to avoid division by zero.\n    if (x_j === x) continue\n    // Update the numerator: multiply by x_j.\n    numerator = mod_n(FIELD.mul(numerator, x_j))\n    // Update the denominator: multiply by (x_j - x).\n    denominator = mod_n(FIELD.mul(denominator, x_j - x))\n  }\n\n  // Return the final interpolation factor, computed as numerator/denominator, reduced mod n.\n  return mod_n(FIELD.div(numerator, denominator))\n}\n\n/**\n * Calculate the Lagrange coefficient for a participant,\n * relative to other participants.\n * \n * @param L A list of other participant indexes.\n * @param P Index of the primary participant.\n * @param x The point to evaluate.\n * @returns A bigint representing the lagrange coefficient.\n */\nexport function calc_lagrange_coeff (\n  L : bigint[],\n  P : bigint,\n  x : bigint\n): bigint {\n  // Ensure that L has unique elements.\n  assert.is_unique_set(L)\n\n  // Initialize numerator and denominator.\n  let numerator   = _1n,\n      denominator = _1n\n\n  // Loop through each index in L:\n  for (const x_j of L) {\n    // Skip the participant index.\n    if (x_j === P) continue\n    // Update the numerator:\n    numerator   = mod_n(FIELD.mul(numerator,   x - x_j))\n    // Update the denominator:\n    denominator = mod_n(FIELD.mul(denominator, P - x_j))\n  }\n\n  // Return the lagrange coefficient.\n  return mod_n(FIELD.div(numerator, denominator))\n}\n","import { Buff, Bytes }   from '@cmdcode/buff'\nimport { G }             from '@/ecc/index.js'\nimport { _0n, _1n }      from '@/const.js'\nimport { assert }        from '@/util/index.js'\nimport { mod_n, lift_x } from '@/ecc/util.js'\n\n/**\n * Creates a list of coefficients for use\n * in a Shamir Secret Sharing scheme.\n * \n * For a deterministic result, you must provide the\n * same number of secrets as the threshold value.\n *  \n * @param secrets   : An array of 32-byte values.\n * @param threshold : The number of coefficients to generate.\n * @returns         : A list of bigints.\n */\nexport function create_share_coeffs (\n  secrets   : Bytes[],\n  threshold : number,\n) {\n  const coeffs : bigint[] = []\n  for (let i = 0; i < threshold; i++) {\n    const secret = secrets.at(i)\n    const coeff  = (secret !== undefined)\n      ? Buff.bytes(secret).big\n      : Buff.random(32).big\n    coeffs.push(mod_n(coeff))\n  }\n  return coeffs\n}\n\n/**\n * Create a list of public key commitments, one for each coefficient.\n */\nexport function get_share_commits (\n  share_coeffs : Bytes[]\n) : string[] {\n  // For each coefficient in the list:\n  return share_coeffs.map(e => {\n    // Convert to a scalar value.\n    const scalar = Buff.bytes(e).big\n    // Return the generator point value, in hex.\n    return G.ScalarBaseMulti(scalar).toHex(true)\n  })\n}\n\n/**\n * Create a list of public key commitments, one for each coefficient.\n */\nexport function merge_share_commits (\n  commits_a : string[],\n  commits_b : string[]\n) : string[] {\n  assert.equal_arr_size(commits_a, commits_b)\n  // Define an array of updated commits.\n  const commits : string[] = []\n  // For each commit in the list:\n  for (let i = 0; i < commits_a.length; i++) {\n    const point_a = lift_x(commits_a[i])\n    const point_b = lift_x(commits_b[i])\n    const point_c = G.ElementAdd(point_a, point_b)\n    const commit  = G.SerializeElement(point_c)\n    commits.push(commit.hex)\n  }\n  // Return the updated commits.\n  return commits\n}\n","import { Buff, Bytes }          from '@cmdcode/buff'\nimport { G }                    from '@/ecc/index.js'\nimport { _0n, _1n }             from '@/const.js'\nimport { assert, get_record }   from '@/util/index.js'\nimport { mod_n, pow_n, lift_x } from '@/ecc/util.js'\n\nimport {\n  interpolate_root,\n  evaluate_x\n} from './poly.js'\n\nimport type { SecretShare } from '@/types/index.js'\n\n/**\n * Creates a list of secret shares for a given polynomial.\n */\nexport function create_shares (\n  coeffs : bigint[],\n  count  : number\n) : SecretShare[] {\n  // Init our share list.\n  const shares  = []\n  // For each share to generate (skipping the root):\n  for (let i = 1; i < count + 1; i++) {\n    // Evaluate the polynomial at the index (i).\n    const scalar = evaluate_x(coeffs, BigInt(i))\n    // Mod and convert the scalar into a hex value.\n    const seckey = Buff.big(scalar, 32).hex\n    // Add the index and share.\n    shares.push({ idx: i, seckey })\n  }\n  // Return the list of shares.\n  return shares\n}\n\nexport function get_share (\n  shares : SecretShare[],\n  index  : number \n) {\n  // Return share at index.\n  return get_record(shares, index)\n}\n\nexport function combine_shares (\n  shares : SecretShare[]\n) : string {\n  // Sum all secret shares into a DKG secret.\n  const secret = shares\n    .map(e => Buff.bytes(e.seckey).big)\n    .reduce((acc, cur) => mod_n(acc += cur), _0n)\n  // Format group share into a secret key.\n  return Buff.big(secret, 32).hex\n}\n\nexport function combine_set (\n  shares : SecretShare[]\n) : SecretShare {\n  // Check that each share has the same idx.\n  assert.is_equal_set(shares.map(e => e.idx))\n  // Get the index value of the first share.\n  const idx    = shares[0].idx\n  // Get the combined secret key.\n  const seckey = combine_shares(shares)\n  // Return secret as a share package.\n  return { idx, seckey }\n}\n\n/**\n * Merge a list of secret shares for a given polynomial.\n */\nexport function merge_shares (\n  shares_a : SecretShare[],\n  shares_b : SecretShare[]\n) : SecretShare[] {\n  assert.equal_arr_size(shares_a, shares_b)\n  // Init our share list.\n  const shares = []\n  // For each share to generate (skipping the root):\n  for (let i = 0; i < shares_a.length; i++) {\n    const curr_share = shares_a[i]\n    const aux_share  = get_record(shares_b, curr_share.idx)\n    const agg_share  = combine_set([ curr_share, aux_share ])\n    shares.push(agg_share)\n  }\n  // Return the list of shares.\n  return shares\n}\n\n/**\n * Verify a secret share using a list of vss commitments.\n */\nexport function verify_share (\n  commits : Bytes[],\n  share   : SecretShare,\n  thold   : number\n) {\n  const scalar = Buff.bytes(share.seckey).big\n  const S_i    = G.ScalarBaseMulti(scalar) \n  let   S_ip   = null\n  for (let j = 0; j < thold; j++) {\n    const point  = lift_x(commits[j])\n    const scalar = pow_n(share.idx, j)\n    const prod   = G.ScalarMulti(point, scalar)\n    S_ip = G.ElementAdd(S_ip, prod)\n  }\n  assert.exists(S_ip)\n  return S_i.x === S_ip.x\n}\n\n\n// export function create_share_set (\n//   shares : SecretShare[],\n//   index  : number\n// ) : SecretShareSet {\n//   return { idx : index, shares }\n// }\n\n/**\n * Interpolate secret shares and derive the root secret.\n */\nexport function derive_shares_secret (\n  shares : SecretShare[]\n) : string {\n  // Convert each share into coordinates.\n  const coords = shares.map(share => [\n    BigInt(share.idx),\n    Buff.bytes(share.seckey).big\n  ])\n  // Interpolate the coordinates to recreate the secret.\n  const secret = interpolate_root(coords)\n  // Return the secret as hex.\n  return Buff.big(secret).hex\n}\n","import { Bytes }    from '@cmdcode/buff'\nimport { _0n, _1n } from '@/const.js'\n\nimport {\n  create_shares\n} from './shares.js'\n\nimport {\n  create_share_coeffs,\n  get_share_commits\n} from './vss.js'\n\nimport type { SecretShareSet, DealerShareSet } from '@/types/index.js'\n\nexport function create_share_set (\n  threshold : number,\n  share_max : number,\n  secrets   : Bytes[] = []\n) : SecretShareSet {\n  // Create the coefficients for the polynomial.\n  const coeffs      = create_share_coeffs(secrets, threshold)\n  // Create the secret shares for each member.\n  const shares      = create_shares(coeffs, share_max)\n  // Create the commitments for each share.\n  const vss_commits = get_share_commits(coeffs)\n  // Return the share package object.\n  return { shares, vss_commits }\n}\n\nexport function create_dealer_set (\n  threshold : number,\n  share_max : number,\n  secrets   : Bytes[] = []\n) : DealerShareSet {\n  const share_set = create_share_set(threshold, share_max, secrets) \n  const group_pk  = share_set.vss_commits[0]\n  // Return the share package object.\n  return { ...share_set, group_pk }\n}\n","import { Buff, Bytes }     from '@cmdcode/buff'\nimport { schnorr }         from '@noble/curves/secp256k1'\nimport { G }               from '@/ecc/index.js'\nimport { lift_x, mod_n }   from '@/ecc/util.js'\nimport { _0n, _1n, CURVE } from '@/const.js'\nimport { get_pubkey }      from './helpers.js'\nimport { interpolate_x }   from './poly.js'\n\nimport {\n  get_group_binders,\n  get_group_prefix,\n  get_group_pubnonce,\n  get_bind_factor\n} from './commit.js'\n\nimport type {\n  GroupKeyContext,\n  GroupSigningCtx,\n  SecretShare,\n  SecretNonce,\n  ShareSignature,\n  PublicNonce\n} from '@/types/index.js'\n\n/**\n * Sign a message using a secret share and secret nonce value.\n */\nexport function sign_msg (\n  ctx    : GroupSigningCtx,\n  share  : SecretShare,\n  snonce : SecretNonce\n) : ShareSignature {\n  // Unpack the signing context.\n  const { bind_factors, challenge, indexes, group_pt : Q } = ctx\n  // Get the binding factor for the share.\n  const bind_factor = get_bind_factor(bind_factors, share.idx)\n  // Get the lagrange coefficient for the share.\n  const coefficient = interpolate_x(indexes, BigInt(share.idx))\n  // Check that both secrets are for the same share index.\n  if (snonce.idx !== share.idx) {\n    throw new Error(`commit index does not match share index: ${snonce.idx} !== ${share.idx}`)\n  }\n  // Convert the secrets to bigints.\n  let snonce_h  = Buff.bytes(snonce.hidden_sn).big,\n      snonce_b  = Buff.bytes(snonce.binder_sn).big,\n      seckey    = Buff.bytes(share.seckey).big\n  // Convert the group pubnonce to a point on the curve.\n  const R_elem = lift_x(ctx.group_pn)\n  // If the point is odd, negate the nonce values.\n  if (!R_elem.hasEvenY()) {\n    snonce_h = CURVE.n - snonce_h\n    snonce_b = CURVE.n - snonce_b\n  }\n  // Initialize the secret key with the proper parity.\n  const sk = mod_n(Q.parity * Q.state * seckey)\n  // Combine the secret nonces with the binding factor.\n  const nk = mod_n(snonce_h + (snonce_b * bind_factor))\n  // Compute the partial signature.\n  const ps = mod_n((challenge * coefficient * sk) + nk)\n  // Return the partial signature.\n  return {\n    idx    : share.idx,\n    psig   : Buff.big(ps, 32).hex,\n    pubkey : get_pubkey(share.seckey)\n  }\n}\n\n/**\n * Combine the signature shares from a FROST signing session.\n */\nexport function combine_partial_sigs (\n  context : GroupSigningCtx,\n  psigs   : ShareSignature[]\n) {\n  // Unpack the signing context.\n  const { challenge, pnonces, group_pt: Q, group_pk, message } = context\n  // Compute the group prefix.\n  const commit_prefix = get_group_prefix(pnonces, group_pk, message)\n  // Compute the binding factors.\n  const group_binders = get_group_binders(pnonces, commit_prefix)\n  // Compute the group pubnonce.\n  const group_pnonce  = get_group_pubnonce(pnonces, group_binders)\n  // Compute the aggregated signature.\n  const ps = psigs\n    .map(e => Buff.hex(e.psig).big)\n    .reduce((acc, nxt) => mod_n(acc + nxt), _0n)\n  // Compute the final tweak value.\n  const twk = mod_n(challenge * Q.parity * Q.tweak)\n  // Add the tweak to the partial signature.\n  const s = mod_n(ps + twk)\n  // Return the aggregated signature.\n  return Buff.join([ group_pnonce.slice(2), Buff.big(s, 32) ]).hex\n}\n\n/**\n * Verify a signature share is valid.\n */\nexport function verify_partial_sig (\n  ctx        : GroupSigningCtx,\n  pnonce     : PublicNonce,\n  share_pk   : string,\n  share_psig : string,\n) {\n  // Unpack the signing context.\n  const { bind_factors, challenge, indexes, group_pn, group_pt: Q } = ctx\n  // Get the binding factor for the share.\n  const binder = get_bind_factor(bind_factors, pnonce.idx)\n  // Lift the public key elements to points on the curve.\n  let hidden_elem = lift_x(pnonce.hidden_pn),\n      binder_elem = lift_x(pnonce.binder_pn),\n      public_elem = lift_x(share_pk)\n  // Lift the group pubnonce to a point on the curve.\n  const R_elem = lift_x(group_pn)\n  // If the point is odd, negate the nonce values.\n  if (!R_elem.hasEvenY()) {\n    hidden_elem = G.ScalarMulti(hidden_elem, CURVE.n - _1n)\n    binder_elem = G.ScalarMulti(binder_elem, CURVE.n - _1n)\n  }\n  // Apply the binding factor to the binder nonce.\n  const commit_elem = G.ScalarMulti(binder_elem, binder)\n  // Add the hidden and binding nonces.\n  const nonce_elem  = G.ElementAdd(hidden_elem, commit_elem)\n  // Compute the lagrange coefficient for the share.\n  const lambda_i    = interpolate_x(indexes, BigInt(pnonce.idx))\n  // Compute the state value.\n  const state = mod_n(Q.parity * Q.state)\n  // Compute the challenge value.\n  const chal  = mod_n(challenge * lambda_i * state)\n  // Convert the partial signature to a bigint.\n  const sig   = Buff.hex(share_psig).big\n  // Lift the partial signature to a point on the curve.\n  const sG    = G.ScalarBaseMulti(sig)\n  // Compute the public key point.\n  const pki   = G.ScalarMulti(public_elem, chal)\n  // Add the nonce and public key points.\n  const R     = G.ElementAdd(nonce_elem, pki)\n  // Return true if the points are equal.\n  return sG.x === R.x\n}\n\n/**\n * Verify that a completed signature is valid.\n */\nexport function verify_final_sig (\n  context   : GroupKeyContext,\n  message   : Bytes,\n  signature : Bytes\n) {\n  const sig = Buff.bytes(signature)\n  const msg = Buff.bytes(message)\n  return schnorr.verify(sig, msg, context.group_pk.slice(2))\n}\n","import { Buff }                from '@cmdcode/buff'\nimport { lift_x, mod_n }       from '@/ecc/util.js'\nimport { G }                   from '@/ecc/index.js'\nimport { assert }              from '@/util/index.js'\nimport { _0n }                 from '@/const.js'\nimport { calc_lagrange_coeff } from './poly.js'\n\nimport type {\n  CurveElement,\n  PublicShare,\n  SecretShare\n} from '@/types/index.js'\n\nexport function create_ecdh_share (\n  members : number[],\n  share   : SecretShare,\n  pubkey  : string\n) : PublicShare {\n  const mbrs = members\n    .filter(idx => idx !== share.idx)\n    .map(i => BigInt(i))\n  const idx     = BigInt(share.idx)\n  const secret  = Buff.hex(share.seckey).big\n  const point   = lift_x(pubkey)\n  const L_coeff = calc_lagrange_coeff(mbrs, idx, _0n)\n  const P_coeff = mod_n(L_coeff * secret)\n  const ecdh_pt = point.multiply(P_coeff)\n  const ecdh_pk = G.SerializeElement(ecdh_pt).hex\n  return { idx: share.idx, pubkey: ecdh_pk }\n}\n\nexport function derive_ecdh_secret (\n  shares : PublicShare[]\n) {\n  let point : CurveElement | null = null\n  for (const share of shares) {\n    if (point === null) {\n      point = lift_x(share.pubkey)\n    } else {\n      const pt = lift_x(share.pubkey)\n      point = point.add(pt)\n    }\n  }\n  assert.exists(point)\n  return G.SerializeElement(point).hex\n}\n","import { Buff }   from '@cmdcode/buff'\nimport { mod_n }  from '@/ecc/util.js'\nimport { assert } from '@/util/index.js'\nimport { _0n }    from '@/const.js'\n\nimport { calc_lagrange_coeff } from './poly.js'\n\nimport {\n  create_share_coeffs,\n  get_share_commits\n} from './vss.js'\n\nimport type { SecretShare, SecretSharePackage }  from '@/types/index.js'\n\nexport function gen_recovery_shares (\n  members   : number[],\n  share     : SecretShare,\n  target    : number,\n  threshold : number,\n  secrets   : string[] = []\n) : SecretSharePackage {\n  assert.ok(members.length >= threshold, 'not enough members to meet threshold')\n  // \n  members = members.sort()\n  // Convert share index to bigint.\n  const share_idx  = BigInt(share.idx)\n  // Convert target index to bigint.\n  const target_idx = BigInt(target)\n  // Remove provided share from members list.\n  const mbrs = members\n    .filter(idx => idx !== share.idx)\n    .map(i => BigInt(i))\n  // Convert participant share to bigint.\n  const share_seckey  = Buff.hex(share.seckey).big\n  // Generate largrange coefficient for the missing share.\n  const lgrng_coeff   = calc_lagrange_coeff(mbrs, share_idx, target_idx)\n  // Assert the lagrange coefficient is greater than zero.\n  assert.ok(lgrng_coeff > _0n, 'lagrange coefficient must be greater than zero')\n  // Generate a new set of random coefficients.\n  const rand_coeffs   = create_share_coeffs(secrets, threshold - 1)\n  // Sum the coefficients \n  const coeff_sum     = rand_coeffs.reduce((p, n) => mod_n(p + n), _0n)\n  // Compute the final repair coefficient.\n  const repair_coeff  = mod_n((lgrng_coeff * share_seckey) - coeff_sum)\n  // Collect the coeffs together as repair shares.\n  const repair_shares = [ ...rand_coeffs, repair_coeff ]\n  // Get commitments for all repair shares.\n  const vss_commits   = get_share_commits(repair_shares)\n  //\n  const shares = members.map((idx, i) => {\n    return { idx, seckey: Buff.big(repair_shares[i]).hex }\n  })\n  // Return repair package.\n  return { idx: share.idx, vss_commits, shares }\n}\n\n/**\n * Recover a member's share using a set of aggregated\n * recovery shares provided by the other members.\n * \n * @param shares A list of aggregated recovery shares.\n * @param idx    The index of the recovered share.\n * @returns      The recovered share.\n */\nexport function recover_share (\n  shares : SecretShare[],\n  idx    : number\n) : SecretShare {\n  const coeffs = shares.map(e => Buff.hex(e.seckey).big)\n  const summed = coeffs.reduce((p, n) => mod_n(p + n), _0n)\n  return { idx, seckey: Buff.big(summed).hex }\n}\n\nexport function verify_recovery_share () {\n\n}\n","import { Bytes }    from '@cmdcode/buff'\nimport { _0n, _1n } from '@/const.js'\n\nimport {\n  combine_set,\n  create_shares\n} from './shares.js'\n\nimport {\n  create_share_coeffs,\n  get_share_commits\n} from './vss.js'\n\nimport type { SecretShare, SecretSharePackage } from '@/types/index.js'\n\nexport function gen_refresh_shares (\n  index     : number,\n  threshold : number,\n  share_max : number,\n  secrets   : Bytes[] = []\n) : SecretSharePackage {\n  // Create the auxiliary coefficients used to update the shares.\n  const sub_coeffs = create_share_coeffs(secrets, threshold - 1)\n  // Prepend a zero value to the list of auxiliary coefficients.\n  const coeffs = [ _0n, ...sub_coeffs ]\n  // Create the refresh shares used for updating the group.\n  const shares = create_shares(coeffs, share_max)\n  // Prepend the first commit into the merged commit list.\n  const vss_commits = get_share_commits(sub_coeffs)\n  // Return the merged share data.\n  return { vss_commits, idx: index, shares }\n}\n\nexport function refresh_share (\n  refresh_shares : SecretShare[],\n  current_share  : SecretShare\n) : SecretShare {\n  const shares = [ current_share, ...refresh_shares ]\n  return combine_set(shares)\n}\n"],"names":["anumber","n","Number","isSafeInteger","Error","abytes","b","lengths","a","Uint8Array","ArrayBuffer","isView","constructor","name","length","includes","aexists","instance","checkFinished","destroyed","finished","crypto","globalThis","undefined","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","outputLen","blockLen","create","randomBytes","bytesLength","getRandomValues","Maj","c","HashMD","padOffset","isLE","super","pos","view","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","aoutput","fill","i","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","sha256","is_safe_num","num","MAX_SAFE_INTEGER","TypeError","is_prefix","actual","target","ec","dc","TextDecoder","strToBytes","bytesToStr","bytes","decode","hex_size","hexstr","size","hex","match","is_hex","isBytes","isArrayOf","isString","Array","isArray","every","item","afn","input","astr","label","aArr","astrArr","anumArr","chain","args","id","wrap","map","x","reduceRight","reduce","alphabet","letters","lettersA","split","indexes","Map","digits","letter","join","separator","from","convertRadix","d","dlen","carry","done","digit","fromCarry","digitBase","div","rounded","floor","push","reverse","gcd","radix2carry","powers","convertRadix2","padding","max","mask","pow","radix2","bits","revPadding","unsafeWrapper","fn","apply","e","base64","chr","end","base64urlnopad","base58","abc","radix","base58check","sum","payload","oldChecksum","newChecksum","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","plen","actualLength","lowered","toLowerCase","slen","toUpperCase","sepIndex","lastIndexOf","endsWith","encodeFromBytes","decodeToBytes","decodeUnsafe","bech32","bech32m","B58chk","Base64","B64url","Bech32","to_words","to_bytes","Bech32m","_0n","_255n","_256n","bigToBytes","big","endian","big_size","use_le","byte","setUint8","numToBytes","num_size","is_bytes","set_buffer","within_size","join_array","buff","bigint_replacer","_","bigint_reviver","test","buffer_data","util.set_buffer","util.join_array","char","substring","parseInt","hexToBytes","of","String","Buff","numToBuff","bigToBuff","bin","binToBuff","raw","rawToBuff","strToBuff","hexToBuff","json","jsonToBuff","base64ToBuff","b64url","b64urlToBuff","bech32ToBuff","bech32mToBuff","b58chk","b58chkToBuff","fmt.strToBytes","fmt.bytesToStr","parse","parse_data","util.is_bytes","util.is_hex","is_equal","random","rand","now","stamp","Date","fmt.buffer_data","to_num","to_big","to_str","to_hex","to_bin","to_b58chk","to_base64","to_b64url","to_hash","stream","Stream","fmt.bytesToNum","fmt.bytesToBig","count","fmt.bytesToBin","to_json","reviver","util.bigint_reviver","JSON","to_bech32","encoder.Bech32","to_bech32m","encoder.Bech32m","chars","toString","padStart","fmt.bytesToHex","encoder.B58chk","encoder.Base64","encoder.B64url","append","equals","prepend","start","array","begin","write","add_varint","calc_varint","toJSON","joined","sort","number","binary","bins","ct","j","fmt.binToBytes","bigint","replacer","util.bigint_replacer","stringify","chk_prefix","assert.is_prefix","data_blob","chunk_size","total_size","chunks","idx","util.parse_data","peek","read","chunk","read_varint","HMAC","hash","_key","ahash","key","iHash","pad","oHash","buf","Object","getPrototypeOf","hmac","message","_1n","_2n","abool","title","hexes","bytesToHex","numberToHexUnpadded","hexToNumber","asciis","asciiToBase16","ch","hl","al","ai","hi","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","expectedLength","concatBytes","arrays","isPosBig","inRange","aInRange","bitLen","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","pred","validatorFns","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","memoized","WeakMap","arg","computed","diff","_3n","_4n","_5n","_8n","mod","result","power","modulo","pow2","invert","u","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","FpPow","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","lastMultiplied","acc","inverted","FpInvertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","constTimeNegate","condition","negate","validateW","W","calcWOpts","windows","windowSize","pointPrecomputes","pointWindowSizes","getW","pippenger","fieldN","points","scalars","forEach","validateMSMPoints","s","validateMSMScalars","zero","wbits","buckets","scalar","resI","sumI","double","validateBasic","curve","Gx","Gy","validateSigVerOpts","opts","lowS","prehash","b2n","h2b","ut","DERErr","DER","Err","_tlv","tag","dataLen","ut.numberToHexUnpadded","lenLen","first","lengthBytes","_int","toSig","int","tlv","ut.abytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","weierstrassPoints","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","ut.concatBytes","y","tail","weierstrassEquation","x2","x3","normPrivateKeyToScalar","N","ut.isBytes","ut.bytesToHex","ut.bytesToNumberBE","error","ut.aInRange","assertPrjPoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","left","right","fromAffine","normalizeZ","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","_setWindowSize","wnaf","setWindowSize","hasEvenY","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","hasPrecomputes","wNAFCachedUnsafe","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","cofactor","toRawBytes","isCompressed","toHex","_bits","elm","unsafeLadder","precomputeWindow","base","window","precomputes","maxNumber","shiftBy","offset1","offset2","abs","cond1","cond2","wNAFUnsafe","curr","getPrecomputes","transform","comp","prev","delete","ProjectivePoint","isWithinCurveOrder","ut.inRange","weierstrass","curveDef","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrtError","suffix","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","format","isHex","isObj","_sig","derError","is","getHash","msgs","os2ip","i2osp","anum","strxor","hash_to_field","options","DST","expand","_DST","log2p","L","len_in_bytes","prb","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","TAGGED_HASH_PREFIXES","taggedHash","messages","tagP","tagH","pointToBytes","numTo32b","modP","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","t","k_","rx","schnorrVerify","pub","schnorr","_P","_N","FIELD","POINT","DOMAIN","CONST","mod_n","str_to_bytes","pubkey","OPT","get_opts","H1","H3","H4","H5","ok","exists","is_included","is_unique_set","filter","is_equal_set","equal_arr_size","array_a","array_b","get_record","records","record","find","taghash","hash340","x_j","ElementAdd","assert.exists","ScalarMulti","pt","ScalarBaseMulti","SerializeElement","DeserializeElement","SerializeScalar","elem","generate_nonce","secret","aux_seed","aux","H.H3","get_pubkey","G.SerializeElement","G.ScalarBaseMulti","get_challenge","pnonce","grp_pk","convert_pubkey","grp_pn","assert.size","get_nonce_ids","pnonces","pn","get_commits_prefix","enc_group_commit","sorted_pnonces","hidden_pn","binder_pn","enc_commit","G.SerializeScalar","get_group_prefix","group_pk","msg_hash","H.H4","commit_hash","H.H5","get_bind_factor","binders","bind","factor","get_group_binders","nonces","H.H1","get_group_pubnonce","group_commit","hidden_elem","G.DeserializeElement","factored_elem","G.ScalarMulti","G.ElementAdd","get_group_key_context","tweaks","int_pk","int_pt","group_pt","element","ints","parity","tweak","tG","get_point_state","get_group_commit_context","key_ctx","group_pubkey","bind_prefix","bind_factors","group_pn","evaluate_x","coeff","interpolate_root","coeffs","interpolate_x","assert.is_included","assert.is_unique_set","numerator","denominator","calc_lagrange_coeff","create_share_coeffs","secrets","threshold","at","get_share_commits","share_coeffs","create_shares","shares","seckey","combine_shares","cur","combine_set","assert.is_equal_set","create_share_set","share_max","vss_commits","context","psigs","group_pnonce","ps","psig","nxt","twk","secret_share","hidden_seed","binder_seed","binder_sn","hidden_sn","share_set","members","share","mbrs","P_coeff","ecdh_pk","assert.ok","share_idx","target_idx","share_seckey","lgrng_coeff","rand_coeffs","coeff_sum","repair_coeff","repair_shares","index","sub_coeffs","commits","com_ctx","commits_a","commits_b","assert.equal_arr_size","commit","shares_a","shares_b","curr_share","agg_share","summed","refresh_shares","current_share","ctx","snonce","bind_factor","coefficient","snonce_h","snonce_b","sk","nk","tweaked","share_pk","share_psig","binder","binder_elem","public_elem","nonce_elem","lambda_i","chal","sG","thold","S_i","S_ip"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}