import { Buff } from '@cmdcode/buff';
import { G } from '../ecc/index.js';
import { assert } from '../util/index.js';
import { mod_n, lift_x } from '../ecc/util.js';
export function create_share_coeffs(secrets, threshold) {
    const coeffs = [];
    for (let i = 0; i < threshold; i++) {
        const secret = secrets.at(i);
        const coeff = (secret !== undefined)
            ? Buff.bytes(secret).big
            : Buff.random(32).big;
        coeffs.push(mod_n(coeff));
    }
    return coeffs;
}
export function get_share_commits(share_coeffs) {
    return share_coeffs.map(e => {
        const scalar = Buff.bytes(e).big;
        return G.ScalarBaseMulti(scalar).toHex(true);
    });
}
export function merge_share_commits(commits_a, commits_b) {
    assert.equal_arr_size(commits_a, commits_b);
    const commits = [];
    for (let i = 0; i < commits_a.length; i++) {
        const point_a = lift_x(commits_a[i]);
        const point_b = lift_x(commits_b[i]);
        const point_c = G.ElementAdd(point_a, point_b);
        const commit = G.SerializeElement(point_c);
        commits.push(commit.hex);
    }
    return commits;
}
