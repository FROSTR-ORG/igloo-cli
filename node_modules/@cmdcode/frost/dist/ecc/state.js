import { Buff } from '@cmdcode/buff';
import { _0n, _1n, _N } from '../const.js';
import { mod_n } from './util.js';
import * as G from './group.js';
export function get_point_state(element, tweaks = []) {
    const ints = tweaks.map(e => Buff.bytes(e).big);
    const pos = _1n;
    const neg = _N - pos;
    let point = element, parity = pos, state = pos, tweak = _0n;
    for (const t of ints) {
        const tG = G.ScalarBaseMulti(t);
        parity = point.hasEvenY() ? pos : neg;
        point = (parity === neg) ? point.negate() : point;
        point = G.ElementAdd(point, tG);
        point.assertValidity();
        state = mod_n(parity * state);
        tweak = mod_n(t + (parity * tweak));
    }
    parity = point.hasEvenY() ? pos : neg;
    return { parity, point, state, tweak };
}
