import type { BifrostNode } from '@frostr/bifrost';
import type { PeerConfig } from '@frostr/bifrost';
import type { NodePolicyInput, NodePolicy, NodePolicySummary, NodePolicyStatus } from './types.js';
interface PreparePoliciesResult {
    peerConfigs: PeerConfig[];
    normalizedPolicies: NodePolicy[];
}
export declare function normalizeNodePolicyInput(policy: NodePolicyInput): NodePolicy;
export declare function normalizeNodePolicies(policies: NodePolicyInput[] | undefined): NodePolicy[];
export declare function prepareNodePolicies(policies: NodePolicyInput[] | undefined): PreparePoliciesResult;
export declare function registerNodePolicyMetadata(node: BifrostNode, policies: NodePolicy[]): void;
export declare function setNodePolicies(node: BifrostNode, policies: NodePolicyInput[], options?: {
    merge?: boolean;
}): NodePolicySummary[];
export declare function updateNodePolicy(node: BifrostNode, policy: NodePolicyInput): NodePolicySummary | undefined;
export declare function getNodePolicies(node: BifrostNode): NodePolicySummary[];
export declare function getNodePolicy(node: BifrostNode, pubkey: string): NodePolicySummary | undefined;
export declare function canSendToPeer(node: BifrostNode, pubkey: string): boolean;
export declare function canReceiveFromPeer(node: BifrostNode, pubkey: string): boolean;
export declare function summarizeNodePolicyMatrix(node: BifrostNode): Record<string, {
    send: boolean;
    recv: boolean;
    status: NodePolicyStatus;
}>;
export {};
