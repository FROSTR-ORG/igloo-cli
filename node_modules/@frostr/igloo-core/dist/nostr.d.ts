import { type NostrKeyPair } from './types.js';
/**
 * Converts a nostr secret key (nsec) to its hex representation
 * @param nsec The nostr secret key in nsec format
 * @returns The secret key in hex format
 */
export declare function nsecToHex(nsec: string): string;
/**
 * Converts a hex secret key to nostr secret key (nsec) format
 * @param hex The secret key in hex format
 * @returns The secret key in nsec format
 */
export declare function hexToNsec(hex: string): string;
/**
 * Converts a hex public key to nostr public key (npub) format
 * @param hex The public key in hex format
 * @returns The public key in npub format
 */
export declare function hexToNpub(hex: string): string;
/**
 * Converts a nostr public key (npub) to its hex representation
 * @param npub The nostr public key in npub format
 * @returns The public key in hex format
 */
export declare function npubToHex(npub: string): string;
/**
 * Generates a new nostr key pair (nsec and npub)
 * @returns Object containing both nsec and npub, plus hex versions
 */
export declare function generateNostrKeyPair(): NostrKeyPair;
/**
 * Derives the public key from a private key
 * @param privateKey The private key in hex or nsec format
 * @returns Object containing npub and hex public key
 */
export declare function derivePublicKey(privateKey: string): {
    npub: string;
    hexPublicKey: string;
};
/**
 * Validates a hex key format (private or public)
 * @param hex The hex string to validate
 * @param keyType Optional key type for more specific validation
 */
export declare function validateHexKey(hex: string, keyType?: 'private' | 'public'): void;
/**
 * Validates a nostr key format (nsec or npub)
 * @param key The nostr key to validate
 * @param expectedType Optional expected type ('nsec' or 'npub')
 */
export declare function validateNostrKey(key: string, expectedType?: 'nsec' | 'npub'): void;
