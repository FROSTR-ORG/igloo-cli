import { type NodeEventConfig } from './node.js';
import { type BifrostNode } from './types.js';
/**
 * Default relay URLs for ping functionality
 */
export declare const DEFAULT_PING_RELAYS: string[];
/**
 * Default ping timeout in milliseconds
 */
export declare const DEFAULT_PING_TIMEOUT = 5000;
/**
 * Default ping interval for monitoring in milliseconds
 */
export declare const DEFAULT_PING_INTERVAL = 30000;
/**
 * Ping result interface
 */
export interface PingResult {
    success: boolean;
    pubkey: string;
    latency?: number;
    policy?: {
        send: boolean;
        recv: boolean;
    };
    error?: string;
    timestamp: Date;
}
/**
 * Ping monitoring configuration
 */
export interface PingMonitorConfig {
    interval: number;
    timeout: number;
    onPingResult?: (result: PingResult) => void;
    onError?: (error: Error, context: string) => void;
    relays?: string[];
    eventConfig?: NodeEventConfig;
}
/**
 * Ping monitor interface
 */
export interface PingMonitor {
    start: () => void;
    stop: () => void;
    isRunning: boolean;
    ping: () => Promise<PingResult[]>;
    cleanup: () => void;
}
/**
 * Ping a specific peer using bifrost ping protocol
 */
export declare function pingPeer(node: BifrostNode, peerPubkey: string, options?: {
    timeout?: number;
    eventConfig?: NodeEventConfig;
}): Promise<PingResult>;
/**
 * Ping multiple peers concurrently
 */
export declare function pingPeers(node: BifrostNode, peerPubkeys: string[], options?: {
    timeout?: number;
    eventConfig?: NodeEventConfig;
}): Promise<PingResult[]>;
/**
 * Create a ping monitor for continuous peer monitoring
 */
export declare function createPingMonitor(node: BifrostNode, peerPubkeys: string[], config?: Partial<PingMonitorConfig>): PingMonitor;
/**
 * Ping peers from credentials (convenience function)
 */
export declare function pingPeersFromCredentials(groupCredential: string, shareCredential: string, options?: {
    relays?: string[];
    timeout?: number;
    eventConfig?: NodeEventConfig;
}): Promise<PingResult[]>;
/**
 * Create a comprehensive ping test for network diagnostics
 */
export declare function runPingDiagnostics(node: BifrostNode, peerPubkeys: string[], options?: {
    rounds?: number;
    timeout?: number;
    interval?: number;
    eventConfig?: NodeEventConfig;
}): Promise<{
    summary: {
        totalRounds: number;
        totalPeers: number;
        averageLatency: number;
        successRate: number;
        fastestPeer?: string;
        slowestPeer?: string;
    };
    rounds: PingResult[][];
    peerStats: {
        [pubkey: string]: {
            successCount: number;
            totalAttempts: number;
            averageLatency: number;
            minLatency: number;
            maxLatency: number;
            successRate: number;
        };
    };
}>;
