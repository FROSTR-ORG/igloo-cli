import { BifrostNode } from '@frostr/bifrost';
import { NodeConfig, type EnhancedNodeConfig, type NodeCreationResult } from './types.js';
/**
 * Configuration for BifrostNode event logging
 */
export interface NodeEventConfig {
    enableLogging?: boolean;
    logLevel?: 'debug' | 'info' | 'warn' | 'error';
    customLogger?: (level: string, message: string, data?: any) => void;
}
/**
 * Creates a BifrostNode with proper validation and event handling
 */
export declare function createBifrostNode(config: NodeConfig, eventConfig?: NodeEventConfig): BifrostNode;
/**
 * Sets up comprehensive event handlers for a BifrostNode
 */
export declare function setupNodeEvents(node: BifrostNode, config?: NodeEventConfig): void;
/**
 * Safely connects a BifrostNode with error handling
 */
export declare function connectNode(node: BifrostNode): Promise<void>;
/**
 * Safely closes a BifrostNode with cleanup
 */
export declare function closeNode(node: BifrostNode): void;
/**
 * Creates a BifrostNode and connects it
 */
export declare function createAndConnectNode(config: NodeConfig, eventConfig?: NodeEventConfig): Promise<BifrostNode>;
/**
 * Enhanced node creation with state information
 * Returns both the node and its current state for better control
 *
 * @param config - Enhanced configuration including timeout and auto-reconnect options
 * @param eventConfig - Optional event configuration for logging and custom handlers
 * @returns Promise resolving to both the connected node and its state information
 *
 * @example
 * ```typescript
 * const { node, state } = await createConnectedNode({
 *   group: 'bfgroup1...',
 *   share: 'bfshare1...',
 *   relays: ['wss://relay.damus.io'],
 *   connectionTimeout: 5000,
 *   autoReconnect: true
 * });
 *
 * console.log('Node ready:', state.isReady);
 * console.log('Connected relays:', state.connectedRelays);
 * ```
 */
export declare function createConnectedNode(config: EnhancedNodeConfig, eventConfig?: NodeEventConfig): Promise<NodeCreationResult>;
/**
 * Check if a BifrostNode is ready synchronously
 * This helper works around the race condition with ready events
 *
 * @param node - The BifrostNode to check
 * @returns true if the node is ready and connected, false otherwise
 *
 * @example
 * ```typescript
 * const node = await createAndConnectNode(config);
 *
 * // Safe synchronous check - no race conditions
 * if (isNodeReady(node)) {
 *   console.log('Node is ready for operations');
 * }
 * ```
 */
export declare function isNodeReady(node: BifrostNode): boolean;
/**
 * Comprehensive cleanup for BifrostNode
 * Removes all event listeners and safely disconnects the node
 *
 * Note: Since we don't have access to the original listener functions,
 * this function uses removeAllListeners to clear all event handlers.
 * For more precise cleanup, store listener references when setting them up.
 */
export declare function cleanupBifrostNode(node: BifrostNode): void;
