import { BifrostNode } from '@frostr/bifrost';
import { type PingResult } from './ping.js';
/**
 * Utility functions for pubkey handling
 */
/**
 * Normalize a pubkey by removing 02/03 prefix if present
 */
export declare function normalizePubkey(pubkey: string): string;
/**
 * Add 02 prefix to a pubkey if it's missing (convert to compressed format)
 */
export declare function addPubkeyPrefix(pubkey: string, prefix?: '02' | '03'): string;
/**
 * Compare two pubkeys after normalization
 */
export declare function comparePubkeys(pubkey1: string, pubkey2: string): boolean;
/**
 * Extract self pubkey from credentials with enhanced error handling
 */
export declare function extractSelfPubkeyFromCredentials(groupCredential: string, shareCredential: string, options?: {
    normalize?: boolean;
    suppressWarnings?: boolean;
}): {
    pubkey: string | null;
    warnings: string[];
};
/**
 * Represents a peer in the FROSTR network
 */
export interface Peer {
    /** The peer's public key (hex format) */
    pubkey: string;
    /** Current online status */
    status: 'online' | 'offline' | 'unknown';
    /** Last seen timestamp */
    lastSeen?: Date;
    /** Last measured latency in milliseconds */
    latency?: number;
    /** Whether this peer can send messages */
    allowSend: boolean;
    /** Whether this peer can receive messages */
    allowReceive: boolean;
    /** Peer policy from last ping response */
    policy?: {
        send: boolean;
        recv: boolean;
    };
}
/**
 * Configuration for peer monitoring
 */
export interface PeerMonitorConfig {
    /** How often to ping peers (in milliseconds) */
    pingInterval: number;
    /** Timeout for ping responses (in milliseconds) */
    pingTimeout: number;
    /** Whether to enable automatic monitoring */
    autoMonitor: boolean;
    /** Custom callback for peer status changes */
    onPeerStatusChange?: (peer: Peer) => void;
    /** Custom error handler */
    onError?: (error: Error, context: string) => void;
    /** Enable logging */
    enableLogging?: boolean;
    /** Suppress expected warnings (fallback messages, etc.) */
    suppressWarnings?: boolean;
    /** Custom logger function */
    customLogger?: (level: 'info' | 'warn' | 'error' | 'debug', message: string, data?: any) => void;
}
/**
 * Default peer monitoring configuration
 */
export declare const DEFAULT_PEER_MONITOR_CONFIG: PeerMonitorConfig;
/**
 * Peer monitoring result
 */
export interface PeerMonitorResult {
    /** All peers in the group */
    peers: Peer[];
    /** Peers that are currently online */
    onlinePeers: Peer[];
    /** Peers that are currently offline */
    offlinePeers: Peer[];
    /** Total number of peers */
    totalPeers: number;
    /** Number of online peers */
    onlineCount: number;
    /** Timestamp of the last check */
    lastChecked: Date;
    /** Average latency of online peers */
    averageLatency?: number;
}
/**
 * Result of peer credential validation
 */
export interface PeerValidationResult {
    isValid: boolean;
    peerCount: number;
    peers: string[];
    selfPubkey?: string;
    warnings: string[];
    error?: string;
}
/**
 * Result of peer manager creation with enhanced error handling
 */
export interface PeerManagerResult {
    success: boolean;
    peerManager?: PeerManager | StaticPeerManager;
    mode: 'full' | 'static' | 'failed';
    warnings?: string[];
    error?: string;
}
/**
 * Enhanced peer manager configuration with fallback options
 */
export interface EnhancedPeerMonitorConfig extends PeerMonitorConfig {
    fallbackMode?: 'static' | 'disabled';
}
/**
 * Static peer manager for fallback scenarios when live monitoring fails
 */
export declare class StaticPeerManager {
    private peers;
    private warnings;
    private config;
    constructor(peerPubkeys: string[], warnings?: string[], config?: Partial<PeerMonitorConfig>);
    getPeerStatus(): PeerMonitorResult;
    getAllPeers(): Peer[];
    getOnlinePeers(): Peer[];
    getOfflinePeers(): Peer[];
    getOnlineCount(): number;
    isPeerOnline(pubkey: string): boolean;
    getPeer(pubkey: string): Peer | undefined;
    getWarnings(): string[];
    pingPeers(): Promise<PeerMonitorResult>;
    startMonitoring(): void;
    stopMonitoring(): void;
    updateConfig(config: Partial<PeerMonitorConfig>): void;
    cleanup(): void;
    private log;
}
/**
 * Enhanced peer manager class leveraging the new ping functionality
 */
export declare class PeerManager {
    private peers;
    private pingMonitor?;
    private config;
    private node;
    private selfPubkey;
    private messageHandler;
    private pingResponseHandler;
    constructor(node: BifrostNode, selfPubkey: string, config?: Partial<PeerMonitorConfig>);
    /**
     * Handle incoming messages to mark peers as online
     */
    private handleMessage;
    /**
     * Handle ping responses to mark peers as online
     */
    private handlePingResponse;
    /**
     * Set up event listeners for backward compatibility
     */
    private setupEventListeners;
    /**
     * Initialize peer list from group configuration
     */
    initializePeers(groupCredential: string, shareCredential: string): void;
    /**
     * Initialize peers from a pre-validated list
     */
    initializePeersFromList(peerPubkeys: string[]): void;
    /**
     * Update the status of a specific peer (public for backward compatibility)
     */
    updatePeerStatus(pubkey: string, status: 'online' | 'offline' | 'unknown'): void;
    /**
     * Update the status of a specific peer from ping result
     */
    private updatePeerFromPingResult;
    /**
     * Ping all peers using the new ping functionality
     */
    pingPeers(): Promise<PeerMonitorResult>;
    /**
     * Get current peer status with enhanced information
     */
    getPeerStatus(): PeerMonitorResult;
    /**
     * Start automatic peer monitoring using the ping monitor
     */
    startMonitoring(): void;
    /**
     * Stop automatic peer monitoring
     */
    stopMonitoring(): void;
    /**
     * Update monitoring configuration
     */
    updateConfig(config: Partial<PeerMonitorConfig>): void;
    /**
     * Ping a specific peer
     */
    pingPeer(pubkey: string): Promise<PingResult>;
    /**
     * Get a specific peer by public key
     */
    getPeer(pubkey: string): Peer | undefined;
    /**
     * Get all peers
     */
    getAllPeers(): Peer[];
    /**
     * Get online peers only
     */
    getOnlinePeers(): Peer[];
    /**
     * Get offline peers only
     */
    getOfflinePeers(): Peer[];
    /**
     * Check if a specific peer is online
     */
    isPeerOnline(pubkey: string): boolean;
    /**
     * Get the count of online peers
     */
    getOnlineCount(): number;
    /**
     * Cleanup resources
     */
    cleanup(): void;
    /**
     * Handle errors with optional callback
     */
    private handleError;
    /**
     * Internal logging
     */
    private log;
}
/**
 * Extract peers from group credentials using improved error handling
 */
export declare function extractPeersFromCredentials(groupCredential: string, shareCredential: string): string[];
/**
 * Simple function to ping peers and get online peer pubkeys (legacy compatibility)
 * @deprecated Use PeerManager.pingPeers() or pingPeersInternal() instead
 */
export declare function pingPeers(node: BifrostNode, timeout?: number): Promise<string[]>;
/**
 * Create a PeerManager instance with a connected BifrostNode
 */
export declare function createPeerManager(node: BifrostNode, groupCredential: string, shareCredential: string, config?: Partial<PeerMonitorConfig>): Promise<PeerManager>;
/**
 * Simple peer status check function using ping functionality
 */
export declare function checkPeerStatus(node: BifrostNode, groupCredential: string, shareCredential: string): Promise<{
    pubkey: string;
    status: 'online' | 'offline';
}[]>;
/**
 * Validate peer credentials before creating peer manager
 */
export declare function validatePeerCredentials(groupCredential: string, shareCredential: string): Promise<PeerValidationResult>;
/**
 * Enhanced peer manager creation with robust error handling and fallback options
 */
export declare function createPeerManagerRobust(node: BifrostNode, groupCredential: string, shareCredential: string, config?: Partial<EnhancedPeerMonitorConfig>): Promise<PeerManagerResult>;
