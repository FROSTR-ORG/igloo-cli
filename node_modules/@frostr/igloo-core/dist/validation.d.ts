import { ValidationResult, RelayValidationResult, BifrostCredentials, ValidatedCredentials } from './types.js';
export declare const VALIDATION_CONSTANTS: {
    readonly SHARE_DATA_SIZE: 100;
    readonly SHARE_INDEX_SIZE: 4;
    readonly SHARE_SECKEY_SIZE: 32;
    readonly SHARE_SNONCE_SIZE: 32;
    readonly GROUP_DATA_SIZE: 37;
    readonly GROUP_PUBKEY_SIZE: 33;
    readonly GROUP_THOLD_SIZE: 4;
    readonly COMMIT_DATA_SIZE: 103;
    readonly GROUP_ID_SIZE: 32;
    readonly MAX_COMMITS: 15;
    readonly BFCRED_HRP: "bfcred";
    readonly BFSHARE_HRP: "bfshare";
    readonly BFGROUP_HRP: "bfgroup";
};
/**
 * Validates a nostr secret key (nsec) format
 * @param nsec The string to validate as nsec
 * @returns Validation result object
 */
export declare function validateNsec(nsec: string): ValidationResult;
/**
 * Validates a hex private key format
 * @param hexPrivkey The string to validate as hex privkey
 * @returns Validation result object
 */
export declare function validateHexPrivkey(hexPrivkey: string): ValidationResult;
/**
 * Validates a Bifrost share format
 * @param share The string to validate as a Bifrost share
 * @returns Validation result object
 */
export declare function validateShare(share: string): ValidationResult;
/**
 * Validates a Bifrost group format
 * @param group The string to validate as a Bifrost group
 * @returns Validation result object
 */
export declare function validateGroup(group: string): ValidationResult;
/**
 * Validates a nostr relay URL
 * @param relay The string to validate as a relay URL
 * @returns Validation result object with normalized URL
 */
export declare function validateRelay(relay: string): ValidationResult;
/**
 * Validates a Bifrost credential string (bfcred)
 * @param cred The string to validate as a Bifrost credential
 * @returns Validation result object
 */
export declare function validateBfcred(cred: string): ValidationResult;
/**
 * Validates a credential format generically
 * @param credential The credential string to validate
 * @param type The type of credential
 * @returns Validation result object
 */
export declare function validateCredentialFormat(credential: string, type: 'share' | 'group' | 'cred'): ValidationResult;
/**
 * Validates a list of relay URLs
 * @param relays Array of relay URL strings
 * @returns Extended validation result with normalized relays and errors
 */
export declare function validateRelayList(relays: string[]): RelayValidationResult;
/**
 * Validates a complete set of Bifrost credentials
 * @param credentials Object containing group, shares, and relays
 * @returns Comprehensive validation result
 */
export declare function validateCredentialSet(credentials: {
    group: string;
    shares: string[];
    relays: string[];
}): {
    isValid: boolean;
    groupValid: boolean;
    shareResults: ValidationResult[];
    relayResults: ValidationResult[];
    errors: string[];
};
/**
 * Validates that enough shares are provided for a threshold
 * @param shares Array of share strings
 * @param requiredThreshold Minimum number of shares required
 * @returns Validation result
 */
export declare function validateMinimumShares(shares: string[], requiredThreshold: number): ValidationResult;
/**
 * Advanced validation with configurable options
 */
export interface ValidationOptions {
    strict?: boolean;
    normalizeRelays?: boolean;
    requireMinShares?: number;
}
/**
 * Validates credentials with advanced options
 * @param credentials The credentials to validate
 * @param options Validation options
 * @returns Validated credentials result
 */
export declare function validateWithOptions(credentials: BifrostCredentials, options?: ValidationOptions): ValidatedCredentials;
