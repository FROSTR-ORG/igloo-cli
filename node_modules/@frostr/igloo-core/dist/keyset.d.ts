import { KeysetParams, KeysetCredentials, type GroupPackage, type SharePackage } from './types.js';
/**
 * Validates keyset parameters
 */
export declare function validateKeysetParams(params: KeysetParams): void;
/**
 * Validates a secret key
 */
export declare function validateSecretKey(secretKey: string): void;
/**
 * Generates a keyset with a provided secret key
 * @param threshold Number of shares required to sign
 * @param totalMembers Total number of shares to create
 * @param secretKey Hex-encoded secret key
 * @returns Object containing encoded group and share credentials
 */
export declare function generateKeysetWithSecret(threshold: number, totalMembers: number, secretKey: string): KeysetCredentials;
/**
 * Decodes a share credential string into a SharePackage
 */
export declare function decodeShare(shareCredential: string): SharePackage;
/**
 * Decodes a group credential string into a GroupPackage
 */
export declare function decodeGroup(groupCredential: string): GroupPackage;
/**
 * Gets basic details about a share (index only for now)
 * For full details including threshold, use getShareDetailsWithGroup
 */
export declare function getShareDetails(shareCredential: string): {
    idx: number;
};
/**
 * Gets complete details about a share including threshold info from group
 */
export declare function getShareDetailsWithGroup(shareCredential: string, groupCredential: string): {
    idx: number;
    threshold: number;
    totalMembers: any;
};
/**
 * Recovers the secret key from a group package and array of share packages
 * @param group The group package containing threshold signing parameters
 * @param shares Array of share packages containing the key shares
 * @returns The recovered secret key as an nsec string
 */
export declare function recoverSecretKey(group: GroupPackage, shares: SharePackage[]): string;
/**
 * Recovers the secret key from credential strings
 * @param groupCredential The group credential string
 * @param shareCredentials Array of share credential strings
 * @returns The recovered secret key as an nsec string
 */
export declare function recoverSecretKeyFromCredentials(groupCredential: string, shareCredentials: string[]): string;
/**
 * Validates that shares belong to the same keyset
 * Note: This validation is simplified since share.group property access needs verification
 */
export declare function validateSharesCompatibility(shares: SharePackage[]): void;
/**
 * Validates that share credentials belong to the same keyset
 */
export declare function validateShareCredentialsCompatibility(shareCredentials: string[]): void;
