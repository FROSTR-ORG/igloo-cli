import { type NodeEventConfig } from './node.js';
import { type EchoListener, type EchoReceivedCallback } from './types.js';
/**
 * Default relay URLs for echo functionality
 */
export declare const DEFAULT_ECHO_RELAYS: string[];
/**
 * Waits for an echo event on a specific share.
 * This function sets up a Bifrost node to listen for an incoming echo request,
 * which signals that another device has successfully imported and is interacting with the share.
 */
export declare function awaitShareEcho(groupCredential: string, shareCredential: string, options?: {
    relays?: string[];
    timeout?: number;
    eventConfig?: NodeEventConfig;
}): Promise<boolean>;
/**
 * Starts listening for echo events on all shares in a keyset.
 * Creates one BifrostNode per share to listen for incoming echo requests.
 * This is useful for detecting when shares have been imported on other devices.
 */
export declare function startListeningForAllEchoes(groupCredential: string, shareCredentials: string[], onEchoReceived: EchoReceivedCallback, options?: {
    relays?: string[];
    eventConfig?: NodeEventConfig;
}): EchoListener;
/**
 * Sends an echo message to test connectivity with a share
 */
export declare function sendEcho(groupCredential: string, shareCredential: string, options?: {
    relays?: string[];
    timeout?: number;
    eventConfig?: NodeEventConfig;
}): Promise<boolean>;
