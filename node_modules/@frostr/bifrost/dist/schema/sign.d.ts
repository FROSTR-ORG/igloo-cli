import z from 'zod';
declare const _default: {
    commit: z.ZodObject<z.objectUtil.extendShape<{
        idx: z.ZodNumber;
        pubkey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        hidden_pn: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        binder_pn: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }, {
        bind_hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sid: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sighash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }>, "strip", z.ZodTypeAny, {
        sighash: string;
        pubkey: string;
        idx: number;
        hidden_pn: string;
        binder_pn: string;
        bind_hash: string;
        sid: string;
    }, {
        sighash: string;
        pubkey: string;
        idx: number;
        hidden_pn: string;
        binder_pn: string;
        bind_hash: string;
        sid: string;
    }>;
    member: z.ZodObject<z.objectUtil.extendShape<{
        idx: z.ZodNumber;
        binder_sn: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        hidden_sn: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        seckey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }, {
        bind_hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sid: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sighash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }>, "strip", z.ZodTypeAny, {
        sighash: string;
        idx: number;
        binder_sn: string;
        hidden_sn: string;
        seckey: string;
        bind_hash: string;
        sid: string;
    }, {
        sighash: string;
        idx: number;
        binder_sn: string;
        hidden_sn: string;
        seckey: string;
        bind_hash: string;
        sid: string;
    }>;
    psig_entry: z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>], null>;
    psig_pkg: z.ZodObject<{
        idx: z.ZodNumber;
        psigs: z.ZodArray<z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>], null>, "many">;
        pubkey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sid: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }, "strip", z.ZodTypeAny, {
        pubkey: string;
        idx: number;
        sid: string;
        psigs: [string, string][];
    }, {
        pubkey: string;
        idx: number;
        sid: string;
        psigs: [string, string][];
    }>;
    session: z.ZodObject<z.objectUtil.extendShape<{
        content: z.ZodNullable<z.ZodString>;
        hashes: z.ZodArray<z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>], z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>, "many">;
        members: z.ZodArray<z.ZodNumber, "many">;
        stamp: z.ZodNumber;
        type: z.ZodString;
    }, {
        gid: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        sid: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }>, "strip", z.ZodTypeAny, {
        type: string;
        members: number[];
        sid: string;
        content: string | null;
        hashes: [string, ...string[]][];
        stamp: number;
        gid: string;
    }, {
        type: string;
        members: number[];
        sid: string;
        content: string | null;
        hashes: [string, ...string[]][];
        stamp: number;
        gid: string;
    }>;
    sighash_vec: z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>], z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
    template: z.ZodObject<{
        content: z.ZodNullable<z.ZodString>;
        hashes: z.ZodArray<z.ZodTuple<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>], z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>, "many">;
        members: z.ZodArray<z.ZodNumber, "many">;
        stamp: z.ZodNumber;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        members: number[];
        content: string | null;
        hashes: [string, ...string[]][];
        stamp: number;
    }, {
        type: string;
        members: number[];
        content: string | null;
        hashes: [string, ...string[]][];
        stamp: number;
    }>;
};
export default _default;
