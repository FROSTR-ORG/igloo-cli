import { z } from 'zod';
declare const _default: {
    cache: z.ZodObject<{
        ecdh: z.ZodOptional<z.ZodMap<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>>;
    }, "strip", z.ZodTypeAny, {
        ecdh?: Map<string, string> | undefined;
    }, {
        ecdh?: Map<string, string> | undefined;
    }>;
    config: z.ZodObject<{
        debug: z.ZodBoolean;
        middleware: z.ZodObject<{
            ecdh: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            sign: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        }, {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        }>;
        policies: z.ZodArray<z.ZodObject<{
            pubkey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
            policy: z.ZodObject<{
                send: z.ZodBoolean;
                recv: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                send: boolean;
                recv: boolean;
            }, {
                send: boolean;
                recv: boolean;
            }>;
        }, "strip", z.ZodTypeAny, {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }, {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }>, "many">;
        sign_ival: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        debug: boolean;
        middleware: {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        };
        policies: {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }[];
        sign_ival: number;
    }, {
        debug: boolean;
        middleware: {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        };
        policies: {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }[];
        sign_ival: number;
    }>;
    middleware: z.ZodObject<{
        ecdh: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        sign: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        ecdh?: ((...args: unknown[]) => unknown) | undefined;
        sign?: ((...args: unknown[]) => unknown) | undefined;
    }, {
        ecdh?: ((...args: unknown[]) => unknown) | undefined;
        sign?: ((...args: unknown[]) => unknown) | undefined;
    }>;
};
export default _default;
