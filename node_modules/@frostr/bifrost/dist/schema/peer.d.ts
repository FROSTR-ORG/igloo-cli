import { z } from 'zod';
declare const _default: {
    config: z.ZodObject<{
        pubkey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        policy: z.ZodObject<{
            send: z.ZodBoolean;
            recv: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            send: boolean;
            recv: boolean;
        }, {
            send: boolean;
            recv: boolean;
        }>;
    }, "strip", z.ZodTypeAny, {
        pubkey: string;
        policy: {
            send: boolean;
            recv: boolean;
        };
    }, {
        pubkey: string;
        policy: {
            send: boolean;
            recv: boolean;
        };
    }>;
    data: z.ZodObject<z.objectUtil.extendShape<{
        pubkey: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        policy: z.ZodObject<{
            send: z.ZodBoolean;
            recv: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            send: boolean;
            recv: boolean;
        }, {
            send: boolean;
            recv: boolean;
        }>;
    }, {
        status: z.ZodEnum<["online", "offline"]>;
        updated: z.ZodNumber;
    }>, "strip", z.ZodTypeAny, {
        status: "online" | "offline";
        pubkey: string;
        policy: {
            send: boolean;
            recv: boolean;
        };
        updated: number;
    }, {
        status: "online" | "offline";
        pubkey: string;
        policy: {
            send: boolean;
            recv: boolean;
        };
        updated: number;
    }>;
    policy: z.ZodObject<{
        send: z.ZodBoolean;
        recv: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        send: boolean;
        recv: boolean;
    }, {
        send: boolean;
        recv: boolean;
    }>;
};
export default _default;
