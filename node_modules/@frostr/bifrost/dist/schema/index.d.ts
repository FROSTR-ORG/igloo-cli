declare const _default: {
    base: {
        any: import("zod").ZodAny;
        base58: import("zod").ZodString;
        base64: import("zod").ZodString;
        base64url: import("zod").ZodString;
        bech32: import("zod").ZodString;
        big: import("zod").ZodBigInt;
        bool: import("zod").ZodBoolean;
        date: import("zod").ZodDate;
        hex20: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        hex32: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        hex33: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        hex64: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        hex: import("zod").ZodEffects<import("zod").ZodString, string, string>;
        json: import("zod").ZodType<string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | any | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | any | null;
        } | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null, import("zod").ZodTypeDef, string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | (string | number | boolean | any | any | null)[] | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | (string | number | boolean | any | any | null)[] | null;
        } | (string | number | boolean | {
            [key: string]: string | number | boolean | any | any | null;
        } | any | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null)[] | null>;
        literal: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodBoolean, import("zod").ZodNull]>;
        num: import("zod").ZodNumber;
        sats: import("zod").ZodBigInt;
        str: import("zod").ZodString;
        stamp: import("zod").ZodNumber;
        uint: import("zod").ZodNumber;
    };
    node: {
        cache: import("zod").ZodObject<{
            ecdh: import("zod").ZodOptional<import("zod").ZodMap<import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>, import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>>>;
        }, "strip", import("zod").ZodTypeAny, {
            ecdh?: Map<string, string> | undefined;
        }, {
            ecdh?: Map<string, string> | undefined;
        }>;
        config: import("zod").ZodObject<{
            debug: import("zod").ZodBoolean;
            middleware: import("zod").ZodObject<{
                ecdh: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[], import("zod").ZodUnknown>, import("zod").ZodUnknown>>;
                sign: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[], import("zod").ZodUnknown>, import("zod").ZodUnknown>>;
            }, "strip", import("zod").ZodTypeAny, {
                ecdh?: ((...args: unknown[]) => unknown) | undefined;
                sign?: ((...args: unknown[]) => unknown) | undefined;
            }, {
                ecdh?: ((...args: unknown[]) => unknown) | undefined;
                sign?: ((...args: unknown[]) => unknown) | undefined;
            }>;
            policies: import("zod").ZodArray<import("zod").ZodObject<{
                pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
                policy: import("zod").ZodObject<{
                    send: import("zod").ZodBoolean;
                    recv: import("zod").ZodBoolean;
                }, "strip", import("zod").ZodTypeAny, {
                    send: boolean;
                    recv: boolean;
                }, {
                    send: boolean;
                    recv: boolean;
                }>;
            }, "strip", import("zod").ZodTypeAny, {
                pubkey: string;
                policy: {
                    send: boolean;
                    recv: boolean;
                };
            }, {
                pubkey: string;
                policy: {
                    send: boolean;
                    recv: boolean;
                };
            }>, "many">;
            sign_ival: import("zod").ZodNumber;
        }, "strip", import("zod").ZodTypeAny, {
            debug: boolean;
            middleware: {
                ecdh?: ((...args: unknown[]) => unknown) | undefined;
                sign?: ((...args: unknown[]) => unknown) | undefined;
            };
            policies: {
                pubkey: string;
                policy: {
                    send: boolean;
                    recv: boolean;
                };
            }[];
            sign_ival: number;
        }, {
            debug: boolean;
            middleware: {
                ecdh?: ((...args: unknown[]) => unknown) | undefined;
                sign?: ((...args: unknown[]) => unknown) | undefined;
            };
            policies: {
                pubkey: string;
                policy: {
                    send: boolean;
                    recv: boolean;
                };
            }[];
            sign_ival: number;
        }>;
        middleware: import("zod").ZodObject<{
            ecdh: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[], import("zod").ZodUnknown>, import("zod").ZodUnknown>>;
            sign: import("zod").ZodOptional<import("zod").ZodFunction<import("zod").ZodTuple<[], import("zod").ZodUnknown>, import("zod").ZodUnknown>>;
        }, "strip", import("zod").ZodTypeAny, {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        }, {
            ecdh?: ((...args: unknown[]) => unknown) | undefined;
            sign?: ((...args: unknown[]) => unknown) | undefined;
        }>;
    };
    peer: {
        config: import("zod").ZodObject<{
            pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            policy: import("zod").ZodObject<{
                send: import("zod").ZodBoolean;
                recv: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                send: boolean;
                recv: boolean;
            }, {
                send: boolean;
                recv: boolean;
            }>;
        }, "strip", import("zod").ZodTypeAny, {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }, {
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
        }>;
        data: import("zod").ZodObject<import("zod").objectUtil.extendShape<{
            pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            policy: import("zod").ZodObject<{
                send: import("zod").ZodBoolean;
                recv: import("zod").ZodBoolean;
            }, "strip", import("zod").ZodTypeAny, {
                send: boolean;
                recv: boolean;
            }, {
                send: boolean;
                recv: boolean;
            }>;
        }, {
            status: import("zod").ZodEnum<["online", "offline"]>;
            updated: import("zod").ZodNumber;
        }>, "strip", import("zod").ZodTypeAny, {
            status: "online" | "offline";
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
            updated: number;
        }, {
            status: "online" | "offline";
            pubkey: string;
            policy: {
                send: boolean;
                recv: boolean;
            };
            updated: number;
        }>;
        policy: import("zod").ZodObject<{
            send: import("zod").ZodBoolean;
            recv: import("zod").ZodBoolean;
        }, "strip", import("zod").ZodTypeAny, {
            send: boolean;
            recv: boolean;
        }, {
            send: boolean;
            recv: boolean;
        }>;
    };
    pkg: {
        commit: import("zod").ZodObject<{
            idx: import("zod").ZodNumber;
            pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            hidden_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            binder_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }, "strip", import("zod").ZodTypeAny, {
            pubkey: string;
            idx: number;
            hidden_pn: string;
            binder_pn: string;
        }, {
            pubkey: string;
            idx: number;
            hidden_pn: string;
            binder_pn: string;
        }>;
        ecdh: import("zod").ZodObject<{
            idx: import("zod").ZodNumber;
            keyshare: import("zod").ZodEffects<import("zod").ZodString, string, string>;
            members: import("zod").ZodArray<import("zod").ZodNumber, "many">;
            ecdh_pk: import("zod").ZodEffects<import("zod").ZodString, string, string>;
        }, "strip", import("zod").ZodTypeAny, {
            idx: number;
            keyshare: string;
            members: number[];
            ecdh_pk: string;
        }, {
            idx: number;
            keyshare: string;
            members: number[];
            ecdh_pk: string;
        }>;
        group: import("zod").ZodObject<{
            commits: import("zod").ZodArray<import("zod").ZodObject<{
                idx: import("zod").ZodNumber;
                pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
                hidden_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
                binder_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            }, "strip", import("zod").ZodTypeAny, {
                pubkey: string;
                idx: number;
                hidden_pn: string;
                binder_pn: string;
            }, {
                pubkey: string;
                idx: number;
                hidden_pn: string;
                binder_pn: string;
            }>, "many">;
            group_pk: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            threshold: import("zod").ZodNumber;
        }, "strip", import("zod").ZodTypeAny, {
            commits: {
                pubkey: string;
                idx: number;
                hidden_pn: string;
                binder_pn: string;
            }[];
            group_pk: string;
            threshold: number;
        }, {
            commits: {
                pubkey: string;
                idx: number;
                hidden_pn: string;
                binder_pn: string;
            }[];
            group_pk: string;
            threshold: number;
        }>;
        share: import("zod").ZodObject<{
            idx: import("zod").ZodNumber;
            binder_sn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            hidden_sn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            seckey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }, "strip", import("zod").ZodTypeAny, {
            idx: number;
            binder_sn: string;
            hidden_sn: string;
            seckey: string;
        }, {
            idx: number;
            binder_sn: string;
            hidden_sn: string;
            seckey: string;
        }>;
    };
    sign: {
        commit: import("zod").ZodObject<import("zod").objectUtil.extendShape<{
            idx: import("zod").ZodNumber;
            pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            hidden_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            binder_pn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }, {
            bind_hash: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sid: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sighash: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }>, "strip", import("zod").ZodTypeAny, {
            sighash: string;
            pubkey: string;
            idx: number;
            hidden_pn: string;
            binder_pn: string;
            bind_hash: string;
            sid: string;
        }, {
            sighash: string;
            pubkey: string;
            idx: number;
            hidden_pn: string;
            binder_pn: string;
            bind_hash: string;
            sid: string;
        }>;
        member: import("zod").ZodObject<import("zod").objectUtil.extendShape<{
            idx: import("zod").ZodNumber;
            binder_sn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            hidden_sn: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            seckey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }, {
            bind_hash: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sid: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sighash: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }>, "strip", import("zod").ZodTypeAny, {
            sighash: string;
            idx: number;
            binder_sn: string;
            hidden_sn: string;
            seckey: string;
            bind_hash: string;
            sid: string;
        }, {
            sighash: string;
            idx: number;
            binder_sn: string;
            hidden_sn: string;
            seckey: string;
            bind_hash: string;
            sid: string;
        }>;
        psig_entry: import("zod").ZodTuple<[import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>, import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>], null>;
        psig_pkg: import("zod").ZodObject<{
            idx: import("zod").ZodNumber;
            psigs: import("zod").ZodArray<import("zod").ZodTuple<[import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>, import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>], null>, "many">;
            pubkey: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sid: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }, "strip", import("zod").ZodTypeAny, {
            pubkey: string;
            idx: number;
            sid: string;
            psigs: [string, string][];
        }, {
            pubkey: string;
            idx: number;
            sid: string;
            psigs: [string, string][];
        }>;
        session: import("zod").ZodObject<import("zod").objectUtil.extendShape<{
            content: import("zod").ZodNullable<import("zod").ZodString>;
            hashes: import("zod").ZodArray<import("zod").ZodTuple<[import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>], import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>>, "many">;
            members: import("zod").ZodArray<import("zod").ZodNumber, "many">;
            stamp: import("zod").ZodNumber;
            type: import("zod").ZodString;
        }, {
            gid: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
            sid: import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>;
        }>, "strip", import("zod").ZodTypeAny, {
            type: string;
            members: number[];
            sid: string;
            content: string | null;
            hashes: [string, ...string[]][];
            stamp: number;
            gid: string;
        }, {
            type: string;
            members: number[];
            sid: string;
            content: string | null;
            hashes: [string, ...string[]][];
            stamp: number;
            gid: string;
        }>;
        sighash_vec: import("zod").ZodTuple<[import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>], import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>>;
        template: import("zod").ZodObject<{
            content: import("zod").ZodNullable<import("zod").ZodString>;
            hashes: import("zod").ZodArray<import("zod").ZodTuple<[import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>], import("zod").ZodEffects<import("zod").ZodEffects<import("zod").ZodString, string, string>, string, string>>, "many">;
            members: import("zod").ZodArray<import("zod").ZodNumber, "many">;
            stamp: import("zod").ZodNumber;
            type: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            type: string;
            members: number[];
            content: string | null;
            hashes: [string, ...string[]][];
            stamp: number;
        }, {
            type: string;
            members: number[];
            content: string | null;
            hashes: [string, ...string[]][];
            stamp: number;
        }>;
    };
};
export default _default;
