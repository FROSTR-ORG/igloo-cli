import { EventEmitter } from './emitter.js';
import { BifrostSigner } from './signer.js';
import { SignerQueue } from './queue.js';
import { NostrNode } from '@cmdcode/nostr-p2p';
import type { SignedMessage } from '@cmdcode/nostr-p2p';
import type { BifrostNodeCache, BifrostNodeConfig, BifrostNodeEvent, BifrostNodeOptions, GroupPackage, PeerData, SharePackage } from '../types/index.js';
export declare class BifrostNode extends EventEmitter<BifrostNodeEvent> {
    private readonly _cache;
    private readonly _client;
    private readonly _config;
    private readonly _peers;
    private readonly _queue;
    private readonly _signer;
    private _is_ready;
    constructor(group: GroupPackage, share: SharePackage, relays: string[], options?: BifrostNodeOptions);
    _filter(msg: SignedMessage): boolean;
    get cache(): BifrostNodeCache;
    get client(): NostrNode;
    get config(): BifrostNodeConfig;
    get debug(): boolean;
    get group(): GroupPackage;
    get is_ready(): boolean;
    get queue(): SignerQueue;
    get peers(): PeerData[];
    get pubkey(): string;
    get req(): {
        ecdh: (ecdh_pk: string, peers?: string[]) => Promise<import("../types/index.js").ApiResponse<string>>;
        echo: (challenge: string) => Promise<import("../types/index.js").ApiResponse<string>>;
        ping: (pubkey: string) => Promise<import("../types/index.js").ApiResponse<import("../types/index.js").PeerPolicy>>;
        queue: (message: string | string[]) => Promise<import("../types/index.js").SignatureEntry>;
        sign: (message: string | import("../types/index.js").SighashVector[], options?: Partial<import("../types/index.js").SignRequestConfig>) => Promise<import("../types/index.js").ApiResponse<import("../types/index.js").SignatureEntry[]>>;
    };
    get signer(): BifrostSigner;
    connect(): Promise<void>;
    close(): Promise<void>;
    update_peer(data: PeerData): void;
}
