export class SignerQueue {
    constructor(node) {
        this._node = node;
        this._ival = node.config.sign_ival;
        this._queue = [];
        this._timer = null;
    }
    get node() {
        return this._node;
    }
    get timer() {
        return this._timer;
    }
    async push(sigvec) {
        return new Promise((resolve, reject) => {
            this._queue.push({ sigvec, resolve, reject });
            this.schedule();
        });
    }
    async process() {
        const batch = [...this._queue];
        this._queue = [];
        this._timer = null;
        if (batch.length === 0)
            return;
        this.node.emit('info', 'batch signing event ids: ' + String(batch.map(req => req.sigvec[0])));
        try {
            const vec = batch.map(req => req.sigvec);
            const res = await this.node.req.sign(vec);
            if (!res.ok) {
                batch.forEach(req => req.reject(res.err));
                return;
            }
            batch.forEach(req => {
                const sig_entry = res.data.find(e => e[0] === req.sigvec[0]);
                if (sig_entry !== undefined) {
                    req.resolve(sig_entry);
                }
                else {
                    req.reject('signature missing from response');
                }
            });
        }
        catch (err) {
            batch.forEach(req => req.reject(err.message));
        }
    }
    schedule() {
        if (this.timer === null) {
            this._timer = setTimeout(() => this.process(), this._ival);
        }
    }
}
