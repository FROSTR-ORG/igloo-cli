type EventHandler<T> = T extends any[] ? (...args: T) => void | Promise<void> : (payload: T) => void | Promise<void>;
type EventName<T> = keyof T | '*';
export declare class EventEmitter<T extends Record<string, any> = {}> {
    private readonly eventMap;
    constructor();
    private _get_event_handlers;
    has<K extends keyof T>(eventName: K): boolean;
    on<K extends keyof T>(eventName: K, handler: EventHandler<T[K]>): void;
    once<K extends keyof T>(eventName: K, handler: EventHandler<T[K]>): void;
    within<K extends keyof T>(eventName: K, handler: EventHandler<T[K]>, timeoutMs: number): void;
    emit<K extends keyof T>(eventName: K, payload: T[K]): void;
    off<K extends keyof T>(eventName: K, handler: EventHandler<T[K]>): void;
    clear(eventName: EventName<T>): void;
}
export {};
