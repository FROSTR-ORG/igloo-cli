import { Buff } from '@cmdcode/buff';
import * as CONST from '../const.js';
import { Assert, normalize_obj } from '../util/index.js';
export function encode_group_pkg(pkg) {
    const data = serialize_group_data(pkg);
    return data.to_bech32m('bfgroup');
}
export function decode_group_pkg(str) {
    const data = Buff.bech32m(str);
    return deserialize_group_data(data);
}
export function serialize_group_data(pkg) {
    const thd = Buff.num(pkg.threshold, CONST.GROUP_THOLD_SIZE);
    const gpk = Buff.hex(pkg.group_pk, CONST.GROUP_PUBKEY_SIZE);
    const com = pkg.commits.map(e => serialize_commit_data(e));
    return Buff.join([gpk, thd, ...com]);
}
export function deserialize_group_data(data) {
    const stream = new Buff(data).stream;
    const group_pk = stream.read(CONST.COMMIT_PUBKEY_SIZE).hex;
    const threshold = stream.read(CONST.GROUP_THOLD_SIZE).num;
    Assert.ok(stream.size % CONST.COMMIT_DATA_SIZE === 0, 'commit data is malformed');
    const count = stream.size / CONST.COMMIT_DATA_SIZE;
    const commits = [];
    for (let i = 0; i < count; i++) {
        const cbytes = stream.read(CONST.COMMIT_DATA_SIZE);
        commits.push(deserialize_commit_data(cbytes));
    }
    Assert.size(stream.data, 0);
    return normalize_obj({ commits, group_pk, threshold });
}
function serialize_commit_data(pkg) {
    const idx = Buff.num(pkg.idx, CONST.COMMIT_INDEX_SIZE);
    const spk = Buff.hex(pkg.pubkey, CONST.COMMIT_PUBKEY_SIZE);
    const bpn = Buff.hex(pkg.binder_pn, CONST.COMMIT_PNONCE_SIZE);
    const hpn = Buff.hex(pkg.hidden_pn, CONST.COMMIT_PNONCE_SIZE);
    return Buff.join([idx, spk, bpn, hpn]);
}
function deserialize_commit_data(data) {
    const stream = new Buff(data).stream;
    Assert.size(stream.data, CONST.COMMIT_DATA_SIZE);
    const idx = stream.read(CONST.COMMIT_INDEX_SIZE).num;
    const pubkey = stream.read(CONST.COMMIT_PUBKEY_SIZE).hex;
    const binder_pn = stream.read(CONST.COMMIT_PNONCE_SIZE).hex;
    const hidden_pn = stream.read(CONST.COMMIT_PNONCE_SIZE).hex;
    Assert.size(stream.data, 0);
    return { idx, binder_pn, hidden_pn, pubkey };
}
