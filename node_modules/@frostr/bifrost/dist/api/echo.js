import { finalize_message } from '@cmdcode/nostr-p2p/lib';
import { Assert, parse_error } from '../util/index.js';
export async function echo_handler_api(node, msg) {
    try {
        node.emit('/echo/handler/req', msg);
        const peer_data = node.peers.find(e => e.pubkey === msg.env.pubkey);
        if (peer_data === undefined)
            throw new Error('peer data not found');
        const envelope = finalize_message({
            data: JSON.stringify(peer_data.policy),
            id: msg.id,
            tag: '/echo/res'
        });
        const res = await node.client.publish(envelope, msg.env.pubkey);
        if (!res.ok)
            throw new Error('failed to publish response');
        node.emit('/echo/handler/res', res.data);
    }
    catch (err) {
        if (node.debug)
            console.log(err);
        node.emit('/echo/handler/rej', [parse_error(err), msg]);
    }
}
export function echo_request_api(node) {
    return async (challenge) => {
        let msg = null;
        try {
            msg = await create_echo_request(node, challenge);
            node.emit('/echo/sender/res', msg);
        }
        catch (err) {
            if (node.debug)
                console.log(err);
            const reason = parse_error(err);
            node.emit('/echo/sender/rej', [reason, msg]);
            return { ok: false, err: reason };
        }
        try {
            Assert.ok(msg !== null, 'no response from self');
            node.emit('/echo/sender/ret', [msg.data]);
            return { ok: true, data: msg.data };
        }
        catch (err) {
            if (node.debug)
                console.log(err);
            const reason = parse_error(err);
            node.emit('/echo/sender/err', [reason, msg]);
            return { ok: false, err: reason };
        }
    };
}
async function create_echo_request(node, challenge) {
    const res = await node.client.request({
        data: challenge,
        tag: '/echo/req'
    }, node.pubkey, {});
    if (!res.ok)
        throw new Error(res.reason);
    return res.inbox[0];
}
