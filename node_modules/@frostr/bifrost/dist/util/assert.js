import { Buff } from '@cmdcode/buff';
import { validate_schema } from './helpers.js';
export var Assert;
(function (Assert) {
    function ok(value, message) {
        if (value === false)
            throw new Error(message ?? 'Assertion failed!');
    }
    Assert.ok = ok;
    function equal(actual, expected, err_msg) {
        if (actual !== expected)
            throw new Error(err_msg ?? `${actual} !== ${expected}`);
    }
    Assert.equal = equal;
    function exists(input, err_msg) {
        if (typeof input === 'undefined') {
            throw new TypeError(err_msg ?? 'Input is undefined!');
        }
        if (input === null) {
            throw new TypeError(err_msg ?? 'Input is null!');
        }
    }
    Assert.exists = exists;
    function size(input, size, err_msg) {
        const bytes = Buff.bytes(input);
        if (bytes.length !== size) {
            throw new Error(err_msg ?? `Invalid byte size: ${bytes.hex} !== ${size}`);
        }
        return true;
    }
    Assert.size = size;
    function schema(schema, input, err_msg) {
        exists(input);
        validate_schema(input, schema, err_msg ?? null);
    }
    Assert.schema = schema;
    function is_hex(input) {
        if (typeof input !== 'string' ||
            input.match(/[^a-fA-F0-9]/) !== null ||
            input.length % 2 !== 0) {
            throw new Error('invalid hex:' + input);
        }
    }
    Assert.is_hex = is_hex;
})(Assert || (Assert = {}));
