export const now = () => Math.floor(Date.now() / 1000);
export const sleep = (ms = 1000) => new Promise(res => setTimeout(res, ms));
export function copy_obj(obj) {
    return JSON.parse(JSON.stringify(obj));
}
export function normalize_obj(obj) {
    if (obj instanceof Map || Array.isArray(obj) || typeof obj !== 'object') {
        return obj;
    }
    else {
        return Object.keys(obj)
            .sort()
            .filter(([_, value]) => value !== undefined)
            .reduce((sorted, key) => {
            sorted[key] = obj[key];
            return sorted;
        }, {});
    }
}
export function parse_error(err) {
    if (err instanceof Error)
        return err.message;
    if (typeof err === 'string')
        return err;
    return String(err);
}
export function validate_schema(obj, schema, err_msg) {
    const parsed = schema.safeParse(obj);
    if (parsed.success)
        return true;
    if (err_msg === undefined)
        return false;
    throw new Error(err_msg ?? 'object failed schema validation');
}
