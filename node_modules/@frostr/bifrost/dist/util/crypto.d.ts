import { Buff } from '@cmdcode/buff';
import { secp256k1 } from '@noble/curves/secp256k1';
type ECCPoint = ReturnType<typeof secp256k1.ProjectivePoint.fromHex>;
export declare function get_seckey(secret: string | Uint8Array, even_y?: boolean): string;
export declare function get_pubkey(seckey: string | Uint8Array, format: 'bip340' | 'ecdsa'): string;
export declare function tweak_seckey(seckey: string | Uint8Array, tweak: string | Uint8Array, even_y?: boolean): string;
export declare function tweak_pubkey(pubkey: string | Uint8Array, tweak: string | Uint8Array, even_y?: boolean): string;
export declare function verify_seckey(seckey: string | Uint8Array): asserts seckey is string;
export declare function verify_pubkey(pubkey: string | Uint8Array, format: 'bip340' | 'ecdsa'): void;
export declare function verify_signature(signature: string | Uint8Array, message: string | Uint8Array, pubkey: string | Uint8Array, format: 'bip340' | 'ecdsa'): boolean;
export declare function verify_point(pubkey: string | Uint8Array): asserts pubkey is string;
export declare function verify_even_y(pubkey: string | Uint8Array): asserts pubkey is string;
export declare function lift_pubkey(pubkey: string | Uint8Array): ECCPoint;
export declare function serialize_pubkey(pubkey: string | Uint8Array, format: 'bip340' | 'ecdsa'): Buff;
export declare function convert_pubkey(pubkey: string | Uint8Array, format: 'bip340' | 'ecdsa'): string;
export declare function get_pubkey_format(pubkey: string | Uint8Array): 'bip340' | 'ecdsa';
export declare function serialize_bytes(bytes: string | Uint8Array): Buff;
export {};
