import { z } from 'zod';
type ParsedArrayResponse<T> = ParsedArraySuccess<T> | ParsedArrayError;
interface ParsedArraySuccess<T> {
    ok: true;
    data: T[];
}
interface ParsedArrayError {
    ok: false;
    errors: string[][];
}
export declare namespace Parse {
    function error(err: unknown): string;
    function data<S extends z.ZodTypeAny>(data: unknown, schema: S): z.SafeParseReturnType<unknown, z.infer<S>>;
    function array<S extends z.ZodTypeAny>(data: unknown[], schema: S): ParsedArrayResponse<z.infer<S>>;
}
export {};
