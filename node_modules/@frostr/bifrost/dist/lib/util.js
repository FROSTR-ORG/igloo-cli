import { derive_shares_secret } from '@cmdcode/frost/lib';
import { Assert } from '../util/index.js';
import { convert_pubkey, get_pubkey } from '../util/crypto.js';
export function get_group_indexes(group) {
    return group.commits.map(e => e.idx);
}
export function select_random_peers(peers, thold) {
    const rnd = () => Math.random() > 0.5 ? 1 : -1;
    const idx = Math.min(peers.length, thold - 1);
    return peers.sort(rnd).slice(0, idx);
}
export function get_member_indexes(group, pubkeys) {
    const indexes = group.commits
        .filter(e => pubkeys.includes(convert_pubkey(e.pubkey, 'bip340')))
        .map(e => e.idx);
    Assert.ok(indexes.length === pubkeys.length, 'index count does not match pubkey count');
    return indexes;
}
export function recover_secret_key(group, shares) {
    Assert.ok(shares.length >= group.threshold, 'not enough shares provided');
    const pubkeys = group.commits.map(e => e.pubkey);
    for (const share of shares) {
        const pk = get_pubkey(share.seckey, 'ecdsa');
        Assert.ok(pubkeys.includes(pk), 'share not found in group: ' + share.idx);
    }
    return derive_shares_secret(shares);
}
