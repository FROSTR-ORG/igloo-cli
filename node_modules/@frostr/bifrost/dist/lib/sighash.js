import { Buff } from '@cmdcode/buff';
import { tweak_pubkey, tweak_seckey } from '../util/crypto.js';
export function format_sigvector(message) {
    if (Array.isArray(message)) {
        return message;
    }
    else if (typeof message === 'string') {
        return [message];
    }
    else {
        throw new Error('invalid message payload');
    }
}
export function create_sighash_commit(session_id, commit, sigvec) {
    const bind_hash = get_sighash_binder(session_id, commit.idx, sigvec);
    const hidden_pn = tweak_pubkey(commit.hidden_pn, bind_hash);
    const binder_pn = tweak_pubkey(commit.binder_pn, bind_hash);
    const [sighash] = sigvec;
    return { ...commit, binder_pn, hidden_pn, bind_hash, sighash, sid: session_id };
}
export function create_sighash_share(session_id, share, sigvec) {
    const bind_hash = get_sighash_binder(session_id, share.idx, sigvec);
    const hidden_sn = tweak_seckey(share.hidden_sn, bind_hash);
    const binder_sn = tweak_seckey(share.binder_sn, bind_hash);
    const [sighash] = sigvec;
    return { ...share, binder_sn, hidden_sn, bind_hash, sighash, sid: session_id };
}
export function get_sighash_binder(session_id, member_idx, sighash) {
    const sid = Buff.bytes(session_id);
    const idx = Buff.num(member_idx, 4);
    const msg = Buff.join(sighash);
    const pre = Buff.join([sid, idx, msg]);
    return pre.digest.hex;
}
