import { Buff } from '@cmdcode/buff';
import { get_group_signing_ctx } from '@cmdcode/frost/lib';
import { now } from '../util/index.js';
import { get_commit_by_idx, get_group_id } from './group.js';
import { create_sighash_commit, create_sighash_share } from './sighash.js';
import Schema from '../schema/index.js';
export const GET_DEFAULT_SESSION_CONFIG = () => {
    return {
        content: null,
        stamp: now(),
        type: 'message',
    };
};
export function create_session_template(members, messages, options = {}) {
    const hashes = typeof messages === 'string'
        ? [[messages]]
        : messages;
    const schema = Schema.sign.template;
    const parsed = schema.safeParse({
        ...GET_DEFAULT_SESSION_CONFIG(),
        ...options,
        hashes: hashes,
        members: members.sort()
    });
    return parsed.success ? parsed.data : null;
}
export function create_session_pkg(group, template) {
    const gid = get_group_id(group);
    const sid = get_session_id(gid, template);
    return { ...template, gid, sid };
}
export function verify_session_pkg(group, session) {
    const gid = get_group_id(group);
    const sid = get_session_id(gid, session);
    return session.gid === gid && session.sid === sid;
}
export function get_session_id(group_id, template) {
    const mbrs = template.members.map(e => Buff.bytes(e));
    const msgs = template.hashes.map(e => Buff.join(e));
    const cont = Buff.bytes(template.content ?? '00');
    const type = Buff.str(template.type);
    const ts = Buff.num(template.stamp, 4);
    const pimg = Buff.join([group_id, ...mbrs, ...msgs, cont, type, ts]);
    return pimg.digest.hex;
}
export function create_member_commits(group, session, idx) {
    const commit = get_commit_by_idx(group.commits, idx);
    return session.hashes.map(vec => create_sighash_commit(session.sid, commit, vec));
}
export function create_member_shares(session, share) {
    return session.hashes.map(vec => create_sighash_share(session.sid, share, vec));
}
export function create_session_commits(group, session) {
    return session.members
        .map(idx => create_member_commits(group, session, idx))
        .flat();
}
export function get_session_ctx(group, session) {
    const pubkeys = group.commits.map(e => e.pubkey);
    const session_commits = create_session_commits(group, session);
    const sigmap = new Map();
    for (const vec of session.hashes) {
        const [sighash, ...tweaks] = vec;
        const sighash_commits = session_commits.filter(e => e.sighash === sighash);
        const context = get_group_signing_ctx(group.group_pk, sighash_commits, sighash, tweaks);
        sigmap.set(sighash, context);
    }
    return { pubkeys, session, sigmap };
}
